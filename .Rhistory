labs(x="cell age (days)", title = "Cell age distribution at varying host ages")+
scale_color_discrete(name="Host age", labels = c("2W", "4W", "6W", "8W", "10W"))+
scale_x_continuous(breaks = c(0, 14, 28, 42, 56, 70))
## Calculating GFP fraction
#parameters that control gfp distribution
gfpmax <- 1.0    ### maximum gfp intensity normalized to 1 but can be moified to the observed value.
gamma_gfp <- log(0.067)   ### rate of loss  of gfp expression
gfp_gate <- log(0.3)       ### threshold gfp intensity above which cells considered GFP+
a_bar <- log(10)
par_gfp <- c(a_bar) #c(gamma_gfp, gfp_gate) #,gfpmax)
params <- c(params_imported, par_gfp)
## number of gfp positive cells. gfp intensities >= gfp_gate.
NofGFPpos <- function(Time, parms){
#gamma_gfp = exp(parms[5])
#gfp_gate = exp(parms[6])
#gfpmax = 1.0 #exp(parms[7])
a_bar = exp(parms[5])
#a_bar = (1/gamma_gfp) * -log(gfp_gate)
value <- c()
for (i in 1:length(Time)){
value[i] <- ifelse(a_bar <= Time[i],
integrate(G_age_Vec, lower = 0, upper = a_bar, Time=Time[i], parms=parms)$value,
integrate(G_age_Vec, lower = 0, upper = Time[i], Time=Time[i], parms=parms)$value
)
}
return(value)
}
## Total number of cells within the population
Noftotal <- function(Time, parms){
value <- c()
for (i in 1:length(Time)){
gfpmin <- exp(-gamma_gfp * Time[i])
value[i] <- integrate(G_age_Vec, lower = 0, upper = Time[i], Time=Time[i], parms=parms)$value
}
return(value)
}
## fraction of cells that GFP+
GFPpos_frac <- function(Time, parms){
NofGFPpos(Time, parms)/Noftotal(Time, parms)
}
## data transformation function
logit_transf <- function(p){
log(p/(1.2-p))
}
## data for fiting
data_fit <- GFP_pos_total %>%
filter(population != "gfp_pos_Thy") %>%
select('age', 'population', 'GFP_frac')
##fitting the ASM to the fraction of GFP positive cells
## Likelihood function
#LL_gfp_frac <- function(par_est, fit_data) {
#  param <- c(params_imported, par_est)
#
#  k  <- length(param)             #number of unknown parameters
#  n1 <- nrow(fit_data)            #number of observations in the dataset to be fitted
#
#  ## generating predictions from the model
#  Timeseq <- fit_data$age    ## time sequence to make predictions for
#  gfp_frac_preds <- GFPpos_frac(Timeseq, param)
#
#  # Sum of squared residuals
#  R1 <- sum((logit_transf(fit_data$GFP_frac) - logit_transf(gfp_frac_preds))^2)   #SSR for dataset
#
#  #log-likelihood assuming that residuals are normally distributed
#  #matrix multipltication of residual and transpose of residuals
#  logl <- -(n1/2)*log(R1)    ### ignaoring terms independent of data
#
#  ## calculating AIC
#  aiccd8NIMR <<- -2*logl + 2*k  ## <<- to force export to the global environment
#
#  return(-logl)     # -logl since optim minimizes the function by default
#}
#
#fit_gfp_frac <- optim(par=par_gfp, fn=LL_gfp_frac, fit_data=data_fit,
#                      control = list(trace = 2))
#fit_gfp_frac
GFPfrac_fit <- function(Time, a_bar){
param <- c(params_imported, a_bar)
GFPpos_frac(Time, param)
}
GFPfrac_fit(Timeseq_onto, 2.2)
GFPOnto_fit(Timeseq_onto, 2.04)
nls_gfp <- nls(logit_transf(GFP_frac) ~ logit_transf(GFPfrac_fit(age, a_bar)),
data = data_fit, start = list('a_bar' = 2.3))
summary(nls_gfp)
par_estm <- c(params_imported, coef(nls_gfp))  #c(params_imported, fit_gfp_frac$par)
## time takes for cell to fall out of the GFP gate in our experiments
a_bar = exp(par_estm[5])
print(paste0("Time taken for a cell with maximum GFP intensity to fall out of the GFP positive gate in our experiments = ", round(a_bar, 2), " days"))
##onto new pred
params_onto <- replace(params_imported, 2, 1.238070e-02*5)
GFPOnto_fit <- function(Time, a_bar){
param <- c(params_onto, a_bar)
GFPpos_frac(Time, param)
}
nls_gfp_onto <- nls(logit_transf(GFP_frac) ~ logit_transf(GFPOnto_fit(age, a_bar)),
data = data_fit, start = list('a_bar' = 2.3))
summary(nls_gfp_onto)
par_estm_onto <- c(params_onto, coef(nls_gfp_onto))  #c(params_imported, fit_gfp_frac$par)
## time takes for cell to fall out of the GFP gate in our experiments
a_bar = exp(par_estm_onto[5])
print(paste0("Time taken for a cell with maximum GFP intensity to fall out of the GFP positive gate in our experiments = ", round(a_bar, 2), " days"))
#clearing R environment
rm(list = ls()); gc()
# imorting libraries
library(tidyverse)
## model and data specific details
Population <-  "cd8"
ModelName <- "asm_deltavar"
## setting directories to work with
#setwd("~/gfp_preds")
WorkinDir <- getwd()
DataDir <- file.path(WorkinDir, "datafiles")
WorkinDir <- getwd()
DataDir <- file.path(WorkinDir, "datafiles")
ModelDir <- file.path(WorkinDir, "stan_models", paste0("MAP_", ModelName, "_", Population, ".stan"))
OutputDir <- file.path(WorkinDir, Population, ModelName)
### Theme for plots
myTheme <- theme(text = element_text(size = 12), axis.text = element_text(size = 12), axis.title =  element_text(size = 10, face = "bold"),
plot.title = element_text(size=12,  hjust = 0.5, face = "bold"),
legend.background = element_blank(), legend.key = element_blank(),
legend.text = element_text(size=12), legend.title = element_text(12))
# setting ggplot theme for rest fo the plots
theme_set(theme_bw())
#### importing data
# GFP positive fraction within Ki67 negative population
GFPposKineg_df <- readxl::read_excel(file.path(DataDir, "RagGFP_ontogeny_pooled2.xlsx"), sheet = 3)%>%
select('mouseID', 'location', 'age', 'TH.SP8', "SP.8nai", 'LN.8nai')
# GFP positive fraction within Ki67 positive population
GFPposKipos_df <- readxl::read_excel(file.path(DataDir, "RagGFP_ontogeny_pooled2.xlsx"), sheet = 6)%>%
select('mouseID', 'location', 'age', 'TH.SP8',  "SP.8nai", 'LN.8nai')
# Total GFP fraction
GFP_pos_total <- full_join(GFPposKineg_df, GFPposKipos_df,
by=c("mouseID", "location", "age")) %>%
mutate(gfp_pos_Thy = TH.SP8.x + TH.SP8.y,
gfp_pos_LN = LN.8nai.x + LN.8nai.y,
gfp_pos_Spl = SP.8nai.x + SP.8nai.y)%>%
select(-contains('.x'), -contains('.y')) %>%
gather(-c('mouseID', 'location', 'age'), key = 'population', value = 'GFP_percents') %>%
mutate(GFP_frac = GFP_percents/100) %>%
arrange(age)
p0 <- ggplot(GFP_pos_total)+
geom_point(aes(x=age, y=(GFP_percents), col=population), size=2)+
labs(x="Host age", y=NULL, title="GFP % total cd8 T cells") + ylim(0, 100)
### Age structured model
#Importing fitted parameters
ParamsFile <- read.csv(file.path(OutputDir, paste0("params_", Population, "_", ModelName, ".csv")))
params_imported <- ParamsFile$mean[1:4]
#### import the age structured model in R from stanfile
rstan::expose_stan_functions(ModelDir)
### testing the model
# age distribution from the stan model
test1 <- Asm_total_age(age=1, time=100, parms=params_imported)
### Vectorising the stan derived age distrubution to work with in R
G_age_Vec <- function(age, Time, parms){
mapply(Asm_total_age, age=age, time=Time, MoreArgs = list(parms))
}
test2 <- G_age_Vec(age=1, Time=100, parms=params_imported)
if(test1 != test2){
print("Error in vectorization of the age distribution")
}
# Normalised age distribution
Norm_age_dist <- function(age, Time, parms){
G_age_Vec(age, Time, parms)/
integrate(G_age_Vec, lower = 0, upper = Time, Time=Time, parms=parms)$value
}
normage_df <- data.frame("Host_age_14" = G_age_Vec(seq(0, 14, length.out = 100), 14, params),
"Host_age_28" = G_age_Vec(seq(0, 28, length.out = 100), 28, params),
"Host_age_42" = G_age_Vec(seq(0, 42, length.out = 100), 42, params),
"Host_age_56" = G_age_Vec(seq(0, 56, length.out = 100), 56, params),
"Host_age_70" = G_age_Vec(seq(0, 70, length.out = 100), 70, params))%>%
gather(key = "Host_age", value = "Counts") %>%
mutate("cell_age" = c(seq(0, 14, length.out = 100),
seq(0, 28, length.out = 100),
seq(0, 42, length.out = 100),
seq(0, 56, length.out = 100),
seq(0, 70, length.out = 100)))
p_age <- ggplot(normage_df) +
geom_point(aes(x=cell_age, y=Counts, col=Host_age), size=1.2) +
labs(x="cell age (days)", title = "Cell age distribution at varying host ages")+
scale_color_discrete(name="Host age", labels = c("2W", "4W", "6W", "8W", "10W"))+
scale_x_continuous(breaks = c(0, 14, 28, 42, 56, 70))
## Calculating GFP fraction
#parameters that control gfp distribution
gfpmax <- 1.0    ### maximum gfp intensity normalized to 1 but can be moified to the observed value.
gamma_gfp <- log(0.067)   ### rate of loss  of gfp expression
gfp_gate <- log(0.3)       ### threshold gfp intensity above which cells considered GFP+
a_bar <- log(10)
par_gfp <- c(a_bar) #c(gamma_gfp, gfp_gate) #,gfpmax)
params <- c(params_imported, par_gfp)
## number of gfp positive cells. gfp intensities >= gfp_gate.
NofGFPpos <- function(Time, parms){
#gamma_gfp = exp(parms[5])
#gfp_gate = exp(parms[6])
#gfpmax = 1.0 #exp(parms[7])
a_bar = exp(parms[5])
#a_bar = (1/gamma_gfp) * -log(gfp_gate)
value <- c()
for (i in 1:length(Time)){
value[i] <- ifelse(a_bar <= Time[i],
integrate(G_age_Vec, lower = 0, upper = a_bar, Time=Time[i], parms=parms)$value,
integrate(G_age_Vec, lower = 0, upper = Time[i], Time=Time[i], parms=parms)$value
)
}
return(value)
}
## Total number of cells within the population
Noftotal <- function(Time, parms){
value <- c()
for (i in 1:length(Time)){
gfpmin <- exp(-gamma_gfp * Time[i])
value[i] <- integrate(G_age_Vec, lower = 0, upper = Time[i], Time=Time[i], parms=parms)$value
}
return(value)
}
## fraction of cells that GFP+
GFPpos_frac <- function(Time, parms){
NofGFPpos(Time, parms)/Noftotal(Time, parms)
}
## data transformation function
logit_transf <- function(p){
log(p/(1.2-p))
}
## data for fiting
data_fit <- GFP_pos_total %>%
filter(population != "gfp_pos_Thy") %>%
select('age', 'population', 'GFP_frac')
##fitting the ASM to the fraction of GFP positive cells
## Likelihood function
#LL_gfp_frac <- function(par_est, fit_data) {
#  param <- c(params_imported, par_est)
#
#  k  <- length(param)             #number of unknown parameters
#  n1 <- nrow(fit_data)            #number of observations in the dataset to be fitted
#
#  ## generating predictions from the model
#  Timeseq <- fit_data$age    ## time sequence to make predictions for
#  gfp_frac_preds <- GFPpos_frac(Timeseq, param)
#
#  # Sum of squared residuals
#  R1 <- sum((logit_transf(fit_data$GFP_frac) - logit_transf(gfp_frac_preds))^2)   #SSR for dataset
#
#  #log-likelihood assuming that residuals are normally distributed
#  #matrix multipltication of residual and transpose of residuals
#  logl <- -(n1/2)*log(R1)    ### ignaoring terms independent of data
#
#  ## calculating AIC
#  aiccd8NIMR <<- -2*logl + 2*k  ## <<- to force export to the global environment
#
#  return(-logl)     # -logl since optim minimizes the function by default
#}
#
#fit_gfp_frac <- optim(par=par_gfp, fn=LL_gfp_frac, fit_data=data_fit,
#                      control = list(trace = 2))
#fit_gfp_frac
GFPfrac_fit <- function(Time, a_bar){
param <- c(params_imported, a_bar)
GFPpos_frac(Time, param)
}
GFPfrac_fit(Timeseq_onto, 2.2)
GFPOnto_fit(Timeseq_onto, 2.04)
nls_gfp <- nls(logit_transf(GFP_frac) ~ logit_transf(GFPfrac_fit(age, a_bar)),
data = data_fit, start = list('a_bar' = 2.3))
summary(nls_gfp)
par_estm <- c(params_imported, coef(nls_gfp))  #c(params_imported, fit_gfp_frac$par)
## time takes for cell to fall out of the GFP gate in our experiments
a_bar = exp(par_estm[5])
print(paste0("Time taken for a cell with maximum GFP intensity to fall out of the GFP positive gate in our experiments = ", round(a_bar, 2), " days"))
##onto new pred
params_onto <- replace(params_imported, 2, 1.238070e-02*2.5)
GFPOnto_fit <- function(Time, a_bar){
param <- c(params_onto, a_bar)
GFPpos_frac(Time, param)
}
nls_gfp_onto <- nls(logit_transf(GFP_frac) ~ logit_transf(GFPOnto_fit(age, a_bar)),
data = data_fit, start = list('a_bar' = 2.3))
summary(nls_gfp_onto)
par_estm_onto <- c(params_onto, coef(nls_gfp_onto))  #c(params_imported, fit_gfp_frac$par)
## time takes for cell to fall out of the GFP gate in our experiments
a_bar = exp(par_estm_onto[5])
print(paste0("Time taken for a cell with maximum GFP intensity to fall out of the GFP positive gate in our experiments = ", round(a_bar, 2), " days"))
#print(paste0("Estimated GFP half life on naive ", Population, ' is ', round(log(2)/(par_estm[5]), 2), " days"))
## generating predictions from the model fit
Timeseq <- seq(from = 5,
to = 300,
length.out=250)
Timeseq_onto <- seq(from = 10,
to = 30,
length.out=30)
GFP_frac_fit <- GFPpos_frac(Timeseq, par_estm)
GFP_frac_Onto <- GFPpos_frac(Timeseq_onto, par_estm_onto)
#p1 <-
ggplot()+
geom_line(aes(x=Timeseq, y=GFP_frac_fit), col=2)+
geom_line(aes(x=Timeseq_onto, y=GFP_frac_Onto), col=4)+
geom_point(data=data_fit, aes(x=age, y=GFP_frac, col=population), size=2) +
ylim(0,1)+ scale_color_discrete(name=NULL, labels=c("LN", "spleen"))+
scale_x_log10() +
labs(x = "Host age (days)", y=NULL, title = "ASM fit to the fraction of GFP positive cells") + myTheme
#### Predicting GFP fractions in Ki67- and Ki67+ compartments
## wrnagling the data
GFPposKineg_grouped <- GFPposKineg_df %>%
gather(-c(mouseID, location, age), key = 'Population', value = 'GFP_frac')
GFPposKipos_grouped <- GFPposKipos_df %>%
gather(-c(mouseID, location, age), key = 'Population', value = 'GFP_frac')
GFP_ki_split <- full_join(GFPposKineg_grouped, GFPposKipos_grouped,
by=c("mouseID", "location", "age", "Population"),
suffix=c('.kineg', '.kipos'))  %>%
gather(-c(mouseID, location, age, Population), key = 'Subset', value = 'GFP_frac') %>%
filter(Population != "TH.SP8")
grid_labels <- as_labeller(c('GFP_frac.kineg' = "GFP+ Ki67-", 'GFP_frac.kipos' = "GFP+ Ki67+"))
p3 <- ggplot(GFP_ki_split)+
geom_point(aes(x=age, y=(GFP_frac), col=Population), size=2)+
labs(x="Host age", y=NULL, title="GFP % in cd8 T cells") +
#scale_x_log10() +
#scale_y_log10()+
facet_wrap(.~ Subset, labeller = grid_labels)
## Proportion of Ki67+ cells
ki67_pos_frac <- function(Time, parms){
value = U_total_time(Time, parms)/
N_total_time(Time, parms)
return(value)
}
Kipos_frac <- ki67_pos_frac(Timeseq, params_imported)
GFPpos_kipos_preds <- GFPpos_frac(Timeseq, par_estm) * Kipos_frac
GFPpos_kineg_preds <- GFPpos_frac(Timeseq, par_estm) * (1 - Kipos_frac)
GFP_split_pred_df <- data.frame("Host_age" = Timeseq,
"GFP_frac.kipos" = GFPpos_kipos_preds,
"GFP_frac.kineg" = GFPpos_kineg_preds) %>%
gather(-c(Host_age), key = 'Subset', value = 'GFP_frac')
Kipos_frac_onto <- ki67_pos_frac(Timeseq_onto, params_onto)
GFPpos_kipos_onto <- GFPpos_frac(Timeseq_onto, par_estm_onto) * Kipos_frac_onto
GFPpos_kineg_onto <- GFPpos_frac(Timeseq_onto, par_estm_onto) * (1 - Kipos_frac_onto)
GFP_split_onto_df <- data.frame("Host_age" = Timeseq_onto,
"GFP_frac.kipos" = GFPpos_kipos_onto,
"GFP_frac.kineg" = GFPpos_kineg_onto) %>%
gather(-c(Host_age), key = 'Subset', value = 'GFP_frac')
#p2 <-
ggplot()+
geom_point(data=GFP_ki_split, aes(x=age, y=(GFP_frac), col=Population), size=2)+
labs(x="Host age", y=NULL, title="Predictions of GFP % in cd8 T cells") +
geom_line(data=GFP_split_pred_df, aes(x=Host_age, y=GFP_frac*100), col=2)+
geom_line(data=GFP_split_onto_df, aes(x=Host_age, y=GFP_frac*100), col=4)+
facet_wrap(.~ Subset, labeller = grid_labels) +
scale_x_log10() +
scale_color_discrete(name=NULL,labels=c('LN', "Spleen")) +myTheme
ggsave(filename = file.path(OutputDir, "gfp_fit.pdf"), p1, device = "pdf", width = 6.5, height = 4.5)
ggsave(filename = file.path(OutputDir, "gfp_preds.pdf"), p2, device = "pdf", width = 12, height = 4.5)
## Total Ki67+ proportions
# GFP positive fraction within Ki67 positive population
GFPnegKipos_df <- readxl::read_excel(file.path(DataDir, "RagGFP_ontogeny_pooled2.xlsx"), sheet = 5)%>%
select('mouseID', 'location', 'age', 'TH.SP8',  "SP.8nai", 'LN.8nai')
GFP_data <- full_join(GFPnegKipos_df, GFPposKipos_df, by = c('mouseID', 'location', 'age'))%>%
mutate(Ki_Thy = (TH.SP8.x + TH.SP8.y)/100,
Ki_LN= (LN.8nai.x + LN.8nai.y)/100,
Ki_Spl = (SP.8nai.x + SP.8nai.y)/100) %>%
#select(-contains('.x'), -contains('.y')) %>%
select(contains('age'), contains('Ki_LN')) %>%
rename(age.at.S1K = age,
total_kiprop = Ki_LN)%>%
mutate(dataset = rep('RAG_GFP', 19))
## importing data to be fitted
chimera_file <- file.path("datafiles/original_data", paste0(Population, "_data.csv"))
chimera_data <- read.csv(chimera_file)  %>%
arrange(age.at.S1K) %>%
filter(Nfd <= 1.2) %>%
select(contains('S1K'), contains('kiprop'))
ontogeny_file <- file.path("datafiles/original_data", paste0(Population, "_ln.csv"))
ontogeny_data <- read.csv(ontogeny_file) %>%
rename(age.at.S1K = time,
total_counts = counts,
total_kiprop = ki67) %>%
select(contains('S1K'), contains('kiprop'))%>%
mutate(dataset = rep('ontogeny', 34))
data_pred <- chimera_data %>%
mutate(dataset = rep('chimera', nrow(chimera_data))) %>%
bind_rows(ontogeny_data) %>%
bind_rows(GFP_data) %>%
arrange(age.at.S1K)
ggplot()+
geom_point(data=data_pred, aes(x=age.at.S1K, y=(total_kiprop * 100), col=dataset), size=2)+
labs(x="Host age", y=NULL, title="Ki67 % in cd8 T cells") +
scale_x_log10()+ scale_y_log10()+
scale_color_manual(name=NULL, values=c(2,4,3))+
geom_line(aes(x=Timeseq, y=Kipos_frac*100), col=2, size=0.7) #+ myTheme
ggsave(filename = file.path(OutputDir, "Ki67_pred.pdf"), last_plot(), device = "pdf", width = 6.5, height = 4.5)
##Host age effects
hostageDir <- file.path(WorkinDir, "stan_models", paste0("asm_da_dh_cd8.stan"))
rstan::expose_stan_functions(hostageDir)
params_ha <- c(params_imported, 0)
Asm_theta_age(1, 100, params_ha)
Asm_init_age(100, 100, params_ha)
Asm_total_age(10, 100, params_ha)
N_total_time(100, params_ha)
U_init_ki_age2(0.3, 100, 100, params_ha)
U_theta_ki_age(0.3, 1, 100, params_ha)
U_total_time(100, params_ha)
params_HA <- c(params_imported, 25)
Timeseq <- seq(from = 10,
to = 300,
length.out=20)
#clearing R environment
rm(list = ls()); gc()
# imorting libraries
library(tidyverse)
## model and data specific details
Population <-  "cd8"
ModelName <- "asm_deltavar"
## setting directories to work with
#setwd("~/gfp_preds")
WorkinDir <- getwd()
DataDir <- file.path(WorkinDir, "datafiles")
WorkinDir <- getwd()
DataDir <- file.path(WorkinDir, "datafiles")
ModelDir <- file.path(WorkinDir, "stan_models", paste0("MAP_", ModelName, "_", Population, ".stan"))
OutputDir <- file.path(WorkinDir, Population, ModelName)
WorkinDir
1/0.018
1/0.0018
log(2)/.002
log(2)/.003
log(2)/.016
log(2)/.011
log(2)/.011
xaringan::inf_mr()
exp(17.15)
exp(17.15)/1e6
exp(17.15)/1e7
exp(17.15)/1e78
exp(17.15)/1e8
3.5 * 1e7
10ˆ0.55
10^0.55
1/0.005
1/0.0052
192/12
exp(-21)
exp(-5.73*e-5)
exp(-5.73*E-5)
e-5
1e-5
exp(-5.73* 1e-5)
exp(-0.0000573)
log(2)/0.59
setwd("~/Desktop/Work/cmdstan/Bcell_fate_imm_resp")
## clearing the environment
rm(list = ls())
gc()
library(rstan)
library(loo)
library(tidyverse)
####################################################################################
#### plotting style
myTheme <- theme(text = element_text(size = 12), axis.text = element_text(size = 12),
axis.title =  element_text(size = 12, face = "bold"),
plot.title = element_text(size=12,  hjust = 0.5, face = "bold"),
legend.background = element_blank(), legend.key = element_blank())
# setting ggplot theme for rest fo the plots
theme_set(theme_bw())
####### plotting
fancy_scientific <- function(l) {
# turn in to character string in scientific notation
l <- format(l, scientific = TRUE)
# quote the part before the exponent to keep all the digits
l <- gsub("^(.*)e", "'\\1'e", l)
# remove + after exponent, if exists. E.g.: (e^+2 -> e^2)
l <- gsub("e\\+","e",l)
# turn the 'e' into plotmath format
l <- gsub("e", "%*%10^", l)
# convert 1x10^ or 1.000x10^ -> 10^
l <- gsub("\\'1[\\.0]*\\'\\%\\*\\%", "", l)
# return this as an expression
parse(text=l)
}
log10minorbreaks=as.numeric(1:10 %o% 10^(3:8))
## Setting all the directories for opeartions
projectDir <- getwd()
scriptDir <- file.path(projectDir, "Rscripts")
modelDir <- file.path(projectDir, "models")
dataDir <- file.path(projectDir, "datafiles")
toolsDir <- file.path(scriptDir, "tools")
outputDir <- file.path(projectDir, "output_fit")
saveDir <- file.path(projectDir, 'save_csv')
LooDir <- file.path('loo_fit')
## model specific details that needs to be change for every run
modelName1 <- "Branched_timeinflux3"
modelName2 <- "Null_timeinflux1"
# compiling multiple stan objects together that ran on different nodes
stanfit1 <- read_stan_csv(file.path(saveDir, paste0(modelName1, "_1", ".csv")))
stanfit2 <- read_stan_csv(file.path(saveDir, paste0(modelName1, "_2",".csv")))
stanfit3 <- read_stan_csv(file.path(saveDir, paste0(modelName1, "_3", ".csv")))
stanfit4 <- read_stan_csv(file.path(saveDir, paste0(modelName1, "_4",".csv")))
stanfit5 <- read_stan_csv(file.path(saveDir, paste0(modelName1, "_5", ".csv")))
stanfit6 <- read_stan_csv(file.path(saveDir, paste0(modelName1, "_6",".csv")))
fit1 <- sflist2stanfit(list(stanfit1, stanfit2, stanfit3, stanfit4, stanfit5, stanfit6))
#### parameter plots
matrix_of_draws1 <- as.data.frame(fit1)   #matrix of parameter draws
alpha_pred1 <- quantile(0.5 * matrix_of_draws1$alpha, probs = c(0.5, 0.025, 0.975))
beta_pred1 <- quantile(0.5 * matrix_of_draws1$beta, probs = c(0.5, 0.025, 0.975))
lambda_WT_pred1 <- quantile(matrix_of_draws1$lambda_WT, probs = c(0.5, 0.025, 0.975))
lambda_N2KO_pred1 <- quantile(matrix_of_draws1$lambda_N2KO, probs = c(0.5, 0.025, 0.975))
delta_pred1 <- quantile(matrix_of_draws1$delta, probs = c(0.5, 0.025, 0.975))
mu_pred1 <- quantile(0.5 * matrix_of_draws1$mu, probs = c(0.5, 0.025, 0.975))
nu_pred1 <- quantile(sqrt(log(3)/matrix_of_draws1$nu), probs = c(0.5, 0.025, 0.975))
params_table <- t(round(data.frame(1/alpha_pred1,
1/beta_pred1,
lambda_WT_pred1,
lambda_N2KO_pred1,
delta_pred1,
1/mu_pred1,
nu_pred1), 4))
params_table

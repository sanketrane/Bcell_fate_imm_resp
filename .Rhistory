myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
cowplot::plot_grid(p1, p2, p1.1, p2.1, p3.1, p4.1, nrow  = 3)
################################################################################################
### parameters table
ptable <- monitor(as.array(fit, pars = parametersToPlot), warmup = 0, print = FALSE)
out_table <- ptable[1:num_pars, c(1, 3, 4, 8)]
out_table
log(2)/0.66
log(2)/0.75
## clearing the environment
rm(list = ls())
gc()
library(rstan)
library(loo)
library(tidyverse)
####################################################################################
#### plotting style
myTheme <- theme(text = element_text(size = 12), axis.text = element_text(size = 12),
axis.title =  element_text(size = 12, face = "bold"),
plot.title = element_text(size=12,  hjust = 0.5, face = "bold"),
legend.background = element_blank(), legend.key = element_blank())
# setting ggplot theme for rest fo the plots
theme_set(theme_bw())
####### plotting
fancy_scientific <- function(l) {
# turn in to character string in scientific notation
l <- format(l, scientific = TRUE)
# quote the part before the exponent to keep all the digits
l <- gsub("^(.*)e", "'\\1'e", l)
# remove + after exponent, if exists. E.g.: (e^+2 -> e^2)
l <- gsub("e\\+","e",l)
# turn the 'e' into plotmath format
l <- gsub("e", "%*%10^", l)
# convert 1x10^ or 1.000x10^ -> 10^
l <- gsub("\\'1[\\.0]*\\'\\%\\*\\%", "", l)
# return this as an expression
parse(text=l)
}
log10minorbreaks=as.numeric(1:10 %o% 10^(3:8))
## Setting all the directories for opeartions
projectDir <- getwd()
scriptDir <- file.path(projectDir, "Rscripts")
modelDir <- file.path(projectDir, "models")
dataDir <- file.path(projectDir, "datafiles")
toolsDir <- file.path(scriptDir, "tools")
outputDir <- file.path(projectDir, "output_fit")
saveDir <- file.path(projectDir, 'save_csv')
LooDir <- file.path('loo_fit')
## model specific details that needs to be change for every run
modelName1 <- "Branched_timeinflux"
modelName2 <- "Linear_timeinflux"
# compiling multiple stan objects together that ran on different nodes
stanfit1 <- read_stan_csv(file.path(saveDir, paste0(modelName1, "_1", ".csv")))
stanfit2 <- read_stan_csv(file.path(saveDir, paste0(modelName1, "_2",".csv")))
stanfit3 <- read_stan_csv(file.path(saveDir, paste0(modelName1, "_3", ".csv")))
stanfit4 <- read_stan_csv(file.path(saveDir, paste0(modelName1, "_4",".csv")))
stanfit5 <- read_stan_csv(file.path(saveDir, paste0(modelName1, "_5", ".csv")))
stanfit6 <- read_stan_csv(file.path(saveDir, paste0(modelName1, "_6",".csv")))
fit1 <- sflist2stanfit(list(stanfit1, stanfit2, stanfit3, stanfit4, stanfit5, stanfit6))
## Time seq for predictions
ts_pred <- seq(4, 30, length.out = 500)
## combined plots
Y1pred1 <- as.data.frame(fit1, pars = "y1_mean_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.045),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.955)) %>%
bind_cols("timeseries" = ts_pred)
Y2pred1 <- as.data.frame(fit1, pars = "y2_mean_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.045),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.955))%>%
bind_cols("timeseries" = ts_pred)
Y3pred1 <- as.data.frame(fit1, pars = "y3_mean_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.045),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.955)) %>%
bind_cols("timeseries" = ts_pred)
Y4pred1 <- as.data.frame(fit1, pars = "y4_mean_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.045),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.955)) %>%
bind_cols("timeseries" = ts_pred)
## loading required datasets for plotting
imm_data <- read_csv(file.path(dataDir, "Bcell_imm_data.csv"))
imm_N2ko_data <- read_csv(file.path(dataDir, "N2KO_imm_data.csv"))
#### plots
p1 <- ggplot() +
geom_line(data = Y2pred1, aes(x = timeseries, y = median), col =2) +
geom_line(data = Y2pred2, aes(x = timeseries, y = median), linetype=2, col ="#923347") +
geom_ribbon(data = Y2pred1, aes(x = timeseries, ymin = lb, ymax = ub), fill=2, alpha = 0.25)+
#geom_ribbon(data = Y2pred2, aes(x = timeseries, ymin = lb, ymax = ub), fill="orange", alpha = 0.25)+
geom_line(data = Y4pred1, aes(x = timeseries, y = median), col =4) +
geom_ribbon(data = Y4pred1, aes(x = timeseries, ymin = lb, ymax = ub), fill=4, alpha = 0.25)+
geom_line(data = Y4pred2, aes(x = timeseries, y = median), linetype=2, col ="darkblue") +
#geom_ribbon(data = MZfractions_pred, aes(x = timeseries, ymin = lb, ymax = ub), fill=2, alpha = 0.25)+
geom_point(data = imm_data, aes(x = days_post_imm, y = CARpos_MZB), col=2) +
geom_point(data = imm_N2ko_data, aes(x = days_post_imm, y = CARpos_MZB), col=4) +
labs(title=paste("CAR positive MZ B cells"),  y=NULL, x="Days post immunization") +
xlim(3, 30) +
scale_y_continuous(limits = c(2e3, 3e5), trans="log10", breaks=c(1e4, 1e5, 1e6, 1e3, 1e8), minor_breaks = log10minorbreaks, labels =fancy_scientific) +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p2 <- ggplot() +
geom_line(data = Y1pred1, aes(x = timeseries, y = median), col =2) +
geom_line(data = Y1pred2, aes(x = timeseries, y = median), linetype=2, col ="#923347") +
geom_ribbon(data = Y1pred1, aes(x = timeseries, ymin = lb, ymax = ub), fill=2, alpha = 0.15)+
#geom_ribbon(data = MZfractions_pred, aes(x = timeseries, ymin = lb, ymax = ub), fill=2, alpha = 0.25)+
geom_point(data = imm_data, aes(x = days_post_imm, y = CARpos_GCB), col=2) +
#geom_line(data = Y5pred, aes(x = timeseries, y = median), col =2) +
#geom_ribbon(data = Y5pred, aes(x = timeseries, ymin = lb, ymax = ub), fill="#ba6dd1", alpha = 0.15)+
#geom_ribbon(data = MZfractions_pred, aes(x = timeseries, ymin = lb, ymax = ub), fill=2, alpha = 0.25)+
geom_point(data = imm_N2ko_data, aes(x = days_post_imm, y = CARpos_GCB), col=4) +
labs(title=paste("CAR positive GC B cells"),  y=NULL, x="Days post immunization") +
xlim(3, 30) +
scale_y_continuous(limits = c(5e3, 1e7), trans="log10", breaks=c(1e4, 1e5, 1e6, 1e7, 1e8), minor_breaks = log10minorbreaks, labels =fancy_scientific) +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
FOtoCARMZ_pred1 <- as.data.frame(fit1, pars = "FOtoCARMZ_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.16),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.84))%>%
bind_cols("timeseries" = ts_pred,
"param" = "FOB to CAR+ MZB",
"Model" = "CARMZ")
MZtoCARMZ_pred1 <- as.data.frame(fit1, pars = "MZtoCARMZ_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.16),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.84))%>%
bind_cols("timeseries" = ts_pred,
"param" = "CAR- MZB to CAR+ MZB",
"Model" = "Branched")
## plots
FOtoBranch_pred <- rbind(FOtoCARMZ_pred1, MZtoCARMZ_pred1)
ggplot() +
geom_line(data = FOtoBranch_pred, aes(x = timeseries, y = median*100, col = param)) +
#geom_line(data = MZinflux_pred2, aes(x = timeseries, y = median*100), col =4) +
geom_ribbon(data = FOtoBranch_pred, aes(x = timeseries, ymin = lb*100, ymax = ub*100, fill=param), alpha = 0.25) +
#geom_ribbon(data = MZinflux_pred2, aes(x = timeseries, ymin = lb*100, ymax = ub*100), fill=4, alpha = 0.25)+
labs(title=paste("Influx into CAR+ MZ (as % of CAR+ MZ)"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal") +
#scale_x_log10(limits=c(3, 30)) +  scale_y_log10(limits=c(3, 125), breaks=c(3, 10, 30, 100)) +
facet_wrap(~ param) + guides(col="none", fill="none")
FOtoCARGC_pred1 <- as.data.frame(fit1, pars = "FOtoCARGC_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.45),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.975))%>%
bind_cols("timeseries" = ts_pred,
"param" = "FO_to_GC",
"Model" = "Branched")
FOtoCARGC_pred2 <- as.data.frame(fit2, pars = "FOtoCARGC_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.45),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.975))%>%
bind_cols("timeseries" = ts_pred,
"param" = "FO_to_GC",
"Model" = "Linear")
ggplot() +
geom_line(data = FOtoCARGC_pred1, aes(x = timeseries, y = median, col = Model), size=1.2) +
geom_ribbon(data = FOtoCARGC_pred1, aes(x = timeseries, ymin = lb, ymax = ub, fill=Model), alpha = 0.25) +
#geom_line(data = FOtoCARGC_pred2, aes(x = timeseries, y = median, col = Model), size=1.2) +
#geom_ribbon(data = FOtoCARGC_pred2, aes(x = timeseries, ymin = lb, ymax = ub, fill=Model), alpha = 0.25) +
labs(title=paste("Influx into GC B cells (as % of GC)"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal") +
ylim(0, 8) + guides(col="none", fill="none") +
scale_x_log10(limits=c(4, 30), breaks=c(5, 10, 20)) + #scale_y_log10(limits=c(1e-0, 10))
facet_wrap(~ Model, scales = "free")
matrix_of_draws1 <- as.data.frame(fit1)   #matrix of parameter draws
alpha_pred1 <- quantile(matrix_of_draws1$alpha, probs = c(0.5, 0.025, 0.975))
beta_pred1 <- quantile(matrix_of_draws1$beta, probs = c(0.5, 0.025, 0.975))
lambda_WT_pred1 <- quantile(log(2)/matrix_of_draws1$lambda_WT, probs = c(0.5, 0.025, 0.975))
lambda_N2KO_pred1 <- quantile(log(2)/matrix_of_draws1$lambda_N2KO, probs = c(0.5, 0.025, 0.975))
delta_pred1 <- quantile(log(2)/matrix_of_draws1$delta, probs = c(0.5, 0.025, 0.975))
mu_pred1 <- quantile(matrix_of_draws1$mu, probs = c(0.5, 0.025, 0.975))
nu_pred1 <- quantile(matrix_of_draws1$nu, probs = c(0.5, 0.025, 0.975))
pars_plot <- c("lambda_WT", "lambda_N2KO",  "delta", "beta")
parnames <- c('Clonal half-life of CAR+ MZ in WT mice', 'Clonal half-life of CAR+ MZ in N2KO mice', 'GC clonal half-life', "Propensity to gain CAR expression (%) for CAR- MZ B cells")
df_pars1 <- data.frame(t(data.frame(lambda_WT_pred1, lambda_N2KO_pred1, delta_pred1,  beta_pred1))) %>%
mutate(parname = parnames,
pars_plot = pars_plot,
Model = "Branched")
parnames_lambda <- c('Control/CAR', 'N2KO//CAR', 'Control/CAR', 'N2KO//CAR')
df_pars_lambda <- data.frame(t(data.frame(lambda_WT_pred1, lambda_N2KO_pred1, delta_pred1, delta_pred1))) %>%
mutate(parname = parnames_lambda,
Param = c("Clonal half-life of CAR positive MZB (days)", "Clonal half-life of CAR positive MZB (days)",
"Clonal half-life of GCB (days)", "Clonal half-life of GCB (days)"),
cell_subset = c("MZ", "MZ", "GC", "GC"))
names(df_pars_lambda) <- c('Estimates', 'par_lb', 'par_ub', 'parname', 'Param', "Subset")
blank_data <- data.frame( Param = c("Clonal half-life of CAR positive MZB (days)", "Clonal half-life of CAR positive MZB (days)",
"Clonal half-life of GCB (days)", "Clonal half-life of GCB (days)"),
Estimates = c(12, 12, 12, 12),
parname = parnames_lambda,
Subset =  c("MZ", "MZ", "GC", "GC"))
ggplot(df_pars_lambda, aes(y=Estimates, x=factor(Subset), col=parname))+
labs(y=NULL) +
geom_errorbar(aes(y=Estimates, ymin=par_lb, ymax=par_ub, x=Subset),
width=0.2, linetype=1,  position=position_dodge(0.4)) +
geom_blank(data = blank_data)+
geom_point(position=position_dodge(width=0.4), stat = "identity", size=4) +
facet_wrap(~ factor(Param), scales = "free") +
expand_limits(y = 0) + scale_y_continuous(expand = c(0.1, 0.1))+
scale_color_manual(values=c(2, 4), name="Mouse strain")+
myTheme + theme(axis.text.x=element_blank(),
axis.title.x=element_blank())+ theme(legend.background = element_blank(), legend.position = c(0.88, 0.85))
## clearing the environment
rm(list = ls())
gc()
library(rstan)
library(loo)
library(tidyverse)
####################################################################################
## model specific details that needs to be change for every run
modelName <- "Branched_timeinflux"
data_der <- "Bcell_imm_data.csv"
data_der2 <- "N2KO_imm_data.csv"
## Setting all the directories for opeartions
projectDir <- getwd()
scriptDir <- file.path(projectDir, "Rscripts")
modelDir <- file.path(projectDir, "models")
dataDir <- file.path(projectDir, "datafiles")
toolsDir <- file.path(scriptDir, "tools")
outputDir <- file.path(projectDir, "output_fit")
saveDir <- file.path(projectDir, 'save_csv')
LooDir <- file.path('loo_fit')
# loadiong the scr# loadiong the script that contains functions for plotting stan parameters
source(file.path(toolsDir, "stanTools.R"))                # save results in new folder
# compiling multiple stan objects together that ran on different nodes
stanfit1 <- read_stan_csv(file.path(saveDir, paste0(modelName, "_1", ".csv")))
stanfit2 <- read_stan_csv(file.path(saveDir, paste0(modelName, "_2",".csv")))
stanfit3 <- read_stan_csv(file.path(saveDir, paste0(modelName, "_3", ".csv")))
stanfit4 <- read_stan_csv(file.path(saveDir, paste0(modelName, "_4",".csv")))
stanfit5 <- read_stan_csv(file.path(saveDir, paste0(modelName, "_5", ".csv")))
stanfit6 <- read_stan_csv(file.path(saveDir, paste0(modelName, "_6",".csv")))
fit <- sflist2stanfit(list(stanfit1, stanfit2, stanfit3, stanfit4, stanfit5, stanfit6))
# finding the parameters used in the model
# using the last parameter("sigma4") in the array to get the total number of parameters set in the model
num_pars <- which(fit@model_pars %in% "sigma3")      # the variable "sigma4" will change depdending on the data used
parametersToPlot <- fit@model_pars[1:num_pars]
# number of post-burnin samples that are used for plotting
nPost <- nrow(fit)
################################################################################################
################################################################################################
## loading required datasets for plotting
imm_data <- read_csv(file.path(dataDir, data_der))
imm_N2ko_data <- read_csv(file.path(dataDir, data_der2))
# ################################################################################################
# calculating PSIS-L00-CV for the fit
MZ_fractions_loglik <- extract_log_lik(fit, parameter_name = "log_lik2", merge_chains = TRUE)
GC_fractions_loglik <- extract_log_lik(fit, parameter_name = "log_lik1", merge_chains = TRUE)
MZN2_fractions_loglik <- extract_log_lik(fit, parameter_name = "log_lik4", merge_chains = TRUE)
GCN2_fractions_loglik <- extract_log_lik(fit, parameter_name = "log_lik3", merge_chains = TRUE)
log_lik_comb <- cbind(MZ_fractions_loglik, GC_fractions_loglik,
MZN2_fractions_loglik, GCN2_fractions_loglik)
# optional but recommended
ll_array <- extract_log_lik(fit, parameter_name = "log_lik1", merge_chains = FALSE)
r_eff <- relative_eff(exp(ll_array))
# loo-ic values
loo_loglik <- loo(log_lik_comb, save_psis = FALSE, cores = 8)
loofilename <- paste0("loosave_", modelName, "_", data_der, ".rds")
write_rds(loo_loglik, file  = file.path(LooDir, loofilename))
# Widely applicable AIC
AICw_lok <- waic(MZ_fractions_loglik, GC_counts_loglik, GC_fractions_loglik)
loo_loglik
ploocv <- data.frame("Model" = modelName,
"LooIC" = loo_loglik$estimates[3],
"SE" = loo_loglik$estimates[6],
"PLoo" = loo_loglik$estimates[2])
write.table(ploocv, file = file.path(outputDir, "stat_table_MZB.csv"),
sep = ",", append = T, quote = FALSE,
col.names = F, row.names = FALSE)
## posterior predictive distributions
# time sequence for predictions
ts_pred <- seq(4, 30, length.out = 500)
numPred <- length(ts_pred)
#### plotting style
myTheme <- theme(text = element_text(size = 12), axis.text = element_text(size = 12),
axis.title =  element_text(size = 12, face = "bold"),
plot.title = element_text(size=12,  hjust = 0.5, face = "bold"),
legend.background = element_blank(), legend.key = element_blank())
# setting ggplot theme for rest fo the plots
theme_set(theme_bw())
####### plotting
fancy_scientific <- function(l) {
# turn in to character string in scientific notation
l <- format(l, scientific = TRUE)
# quote the part before the exponent to keep all the digits
l <- gsub("^(.*)e", "'\\1'e", l)
# remove + after exponent, if exists. E.g.: (e^+2 -> e^2)
l <- gsub("e\\+","e",l)
# turn the 'e' into plotmath format
l <- gsub("e", "%*%10^", l)
# convert 1x10^ or 1.000x10^ -> 10^
l <- gsub("\\'1[\\.0]*\\'\\%\\*\\%", "", l)
# return this as an expression
parse(text=l)
}
log10minorbreaks=as.numeric(1:10 %o% 10^(3:8))
Y1pred <- as.data.frame(fit, pars = "y1_mean_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.045),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.955)) %>%
bind_cols("timeseries" = ts_pred)
Y2pred <- as.data.frame(fit, pars = "y2_mean_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.045),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.955))%>%
bind_cols("timeseries" = ts_pred)
Y3pred <- as.data.frame(fit, pars = "y3_mean_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.045),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.955)) %>%
bind_cols("timeseries" = ts_pred)
Y4pred <- as.data.frame(fit, pars = "y4_mean_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.045),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.955)) %>%
bind_cols("timeseries" = ts_pred)
GCcounts_pred <- as.data.frame(fit, pars = "CAR_GCcounts_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.045),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.955))%>%
bind_cols("timeseries" = ts_pred)
MZcounts_pred <- as.data.frame(fit, pars = "CAR_MZcounts_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.045),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.955))%>%
bind_cols("timeseries" = ts_pred)
GCN2counts_pred <- as.data.frame(fit, pars = "CAR_GCN2counts_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.045),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.955))%>%
bind_cols("timeseries" = ts_pred)
MZN2counts_pred <- as.data.frame(fit, pars = "CAR_MZN2counts_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.045),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.955))%>%
bind_cols("timeseries" = ts_pred)
ggplot() +
#geom_hline(yintercept = exp(10.8))+
geom_line(data = Y2pred, aes(x = timeseries, y = median), col =2) +
geom_ribbon(data = Y2pred, aes(x = timeseries, ymin = lb, ymax = ub), fill=2, alpha = 0.25)+
geom_line(data = Y4pred, aes(x = timeseries, y = median), col =4) +
geom_ribbon(data = Y4pred, aes(x = timeseries, ymin = lb, ymax = ub), fill=4, alpha = 0.25)+
#geom_ribbon(data = MZfractions_pred, aes(x = timeseries, ymin = lb, ymax = ub), fill=2, alpha = 0.25)+
geom_point(data = imm_data, aes(x = days_post_imm, y = CARpos_MZB), col=2) +
geom_point(data = imm_N2ko_data, aes(x = days_post_imm, y = CARpos_MZB), col=4) +
labs(title=paste("CAR positive MZ B cells"),  y=NULL, x="Days post immunization") +
xlim(0, 30) +
scale_y_continuous(limits = c(2e3, 3e5), trans="log10", breaks=c(1e4, 1e5, 1e6, 1e3, 1e8), minor_breaks = log10minorbreaks, labels =fancy_scientific) +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
ggplot() +
geom_line(data = Y1pred, aes(x = timeseries, y = median), col =2) +
geom_ribbon(data = Y1pred, aes(x = timeseries, ymin = lb, ymax = ub), fill=2, alpha = 0.15)+
#geom_ribbon(data = MZfractions_pred, aes(x = timeseries, ymin = lb, ymax = ub), fill=2, alpha = 0.25)+
geom_point(data = imm_data, aes(x = days_post_imm, y = CARpos_GCB), col=2) +
geom_line(data = Y3pred, aes(x = timeseries, y = median), col =2) +
geom_ribbon(data = Y3pred, aes(x = timeseries, ymin = lb, ymax = ub), fill="#ba6dd1", alpha = 0.15)+
#geom_ribbon(data = MZfractions_pred, aes(x = timeseries, ymin = lb, ymax = ub), fill=2, alpha = 0.25)+
geom_point(data = imm_N2ko_data, aes(x = days_post_imm, y = CARpos_GCB), col=4) +
labs(title=paste("CAR positive GC B cells"),  y=NULL, x="Days post immunization") +
xlim(0, 30) +
scale_y_continuous(limits = c(5e3, 1e7), trans="log10", breaks=c(1e4, 1e5, 1e6, 1e7, 1e8), minor_breaks = log10minorbreaks, labels =fancy_scientific) +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
FOtoCARMZ_pred1 <- as.data.frame(fit1, pars = "FOtoCARMZ_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.16),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.84))%>%
bind_cols("timeseries" = ts_pred,
"param" = "FOB to CAR+ MZB",
"Model" = "CARMZ")
MZtoCARMZ_pred1 <- as.data.frame(fit1, pars = "MZtoCARMZ_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.16),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.84))%>%
bind_cols("timeseries" = ts_pred,
"param" = "CAR- MZB to CAR+ MZB",
"Model" = "Branched")
# compiling multiple stan objects together that ran on different nodes
stanfit1 <- read_stan_csv(file.path(saveDir, paste0(modelName1, "_1", ".csv")))
stanfit2 <- read_stan_csv(file.path(saveDir, paste0(modelName1, "_2",".csv")))
stanfit3 <- read_stan_csv(file.path(saveDir, paste0(modelName1, "_3", ".csv")))
stanfit4 <- read_stan_csv(file.path(saveDir, paste0(modelName1, "_4",".csv")))
stanfit5 <- read_stan_csv(file.path(saveDir, paste0(modelName1, "_5", ".csv")))
stanfit6 <- read_stan_csv(file.path(saveDir, paste0(modelName1, "_6",".csv")))
fit1 <- sflist2stanfit(list(stanfit1, stanfit2, stanfit3, stanfit4, stanfit5, stanfit6))
matrix_of_draws1 <- as.data.frame(fit1)   #matrix of parameter draws
alpha_pred1 <- quantile(matrix_of_draws1$alpha, probs = c(0.5, 0.025, 0.975))
beta_pred1 <- quantile(matrix_of_draws1$beta, probs = c(0.5, 0.025, 0.975))
lambda_WT_pred1 <- quantile(log(2)/matrix_of_draws1$lambda_WT, probs = c(0.5, 0.025, 0.975))
lambda_N2KO_pred1 <- quantile(log(2)/matrix_of_draws1$lambda_N2KO, probs = c(0.5, 0.025, 0.975))
delta_pred1 <- quantile(log(2)/matrix_of_draws1$delta, probs = c(0.5, 0.025, 0.975))
mu_pred1 <- quantile(matrix_of_draws1$mu, probs = c(0.5, 0.025, 0.975))
nu_pred1 <- quantile(matrix_of_draws1$nu, probs = c(0.5, 0.025, 0.975))
pars_plot <- c("lambda_WT", "lambda_N2KO",  "delta", "beta")
parnames <- c('Clonal half-life of CAR+ MZ in WT mice', 'Clonal half-life of CAR+ MZ in N2KO mice', 'GC clonal half-life', "Propensity to gain CAR expression (%) for CAR- MZ B cells")
df_pars1 <- data.frame(t(data.frame(lambda_WT_pred1, lambda_N2KO_pred1, delta_pred1,  beta_pred1))) %>%
mutate(parname = parnames,
pars_plot = pars_plot,
Model = "Branched")
parnames_lambda <- c('Control/CAR', 'N2KO//CAR', 'Control/CAR', 'N2KO//CAR')
df_pars_lambda <- data.frame(t(data.frame(lambda_WT_pred1, lambda_N2KO_pred1, delta_pred1, delta_pred1))) %>%
mutate(parname = parnames_lambda,
Param = c("Clonal half-life of CAR positive MZB (days)", "Clonal half-life of CAR positive MZB (days)",
"Clonal half-life of GCB (days)", "Clonal half-life of GCB (days)"),
cell_subset = c("MZ", "MZ", "GC", "GC"))
names(df_pars_lambda) <- c('Estimates', 'par_lb', 'par_ub', 'parname', 'Param', "Subset")
blank_data <- data.frame( Param = c("Clonal half-life of CAR positive MZB (days)", "Clonal half-life of CAR positive MZB (days)",
"Clonal half-life of GCB (days)", "Clonal half-life of GCB (days)"),
Estimates = c(12, 12, 12, 12),
parname = parnames_lambda,
Subset =  c("MZ", "MZ", "GC", "GC"))
ggplot(df_pars_lambda, aes(y=Estimates, x=factor(Subset), col=parname))+
labs(y=NULL) +
geom_errorbar(aes(y=Estimates, ymin=par_lb, ymax=par_ub, x=Subset),
width=0.2, linetype=1,  position=position_dodge(0.4)) +
geom_blank(data = blank_data)+
geom_point(position=position_dodge(width=0.4), stat = "identity", size=4) +
facet_wrap(~ factor(Param), scales = "free") +
expand_limits(y = 0) + scale_y_continuous(expand = c(0.1, 0.1))+
scale_color_manual(values=c(2, 4), name="Mouse strain")+
myTheme + theme(axis.text.x=element_blank(),
axis.title.x=element_blank())+ theme(legend.background = element_blank(), legend.position = c(0.88, 0.85))
FOtoCARMZ_pred1 <- as.data.frame(fit1, pars = "FOtoCARMZ_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.16),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.84))%>%
bind_cols("timeseries" = ts_pred,
"param" = "FOB to CAR+ MZB",
"Model" = "CARMZ")
MZtoCARMZ_pred1 <- as.data.frame(fit1, pars = "MZtoCARMZ_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.16),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.84))%>%
bind_cols("timeseries" = ts_pred,
"param" = "CAR- MZB to CAR+ MZB",
"Model" = "Branched")
## plots
FOtoBranch_pred <- rbind(FOtoCARMZ_pred1, MZtoCARMZ_pred1)
ggplot() +
geom_line(data = FOtoBranch_pred, aes(x = timeseries, y = median*100, col = param)) +
#geom_line(data = MZinflux_pred2, aes(x = timeseries, y = median*100), col =4) +
geom_ribbon(data = FOtoBranch_pred, aes(x = timeseries, ymin = lb*100, ymax = ub*100, fill=param), alpha = 0.25) +
#geom_ribbon(data = MZinflux_pred2, aes(x = timeseries, ymin = lb*100, ymax = ub*100), fill=4, alpha = 0.25)+
labs(title=paste("Influx into CAR+ MZ (as % of CAR+ MZ)"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal") +
#scale_x_log10(limits=c(3, 30)) +  scale_y_log10(limits=c(3, 125), breaks=c(3, 10, 30, 100)) +
facet_wrap(~ param) + guides(col="none", fill="none")
FOtoCARGC_pred1 <- as.data.frame(fit1, pars = "FOtoCARGC_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.45),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.975))%>%
bind_cols("timeseries" = ts_pred,
"param" = "FO_to_GC",
"Model" = "Branched")
FOtoCARGC_pred2 <- as.data.frame(fit2, pars = "FOtoCARGC_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.45),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.975))%>%
bind_cols("timeseries" = ts_pred,
"param" = "FO_to_GC",
"Model" = "Linear")
ggplot() +
geom_line(data = FOtoCARGC_pred1, aes(x = timeseries, y = median, col = Model), size=1.2) +
geom_ribbon(data = FOtoCARGC_pred1, aes(x = timeseries, ymin = lb, ymax = ub, fill=Model), alpha = 0.25) +
#geom_line(data = FOtoCARGC_pred2, aes(x = timeseries, y = median, col = Model), size=1.2) +
#geom_ribbon(data = FOtoCARGC_pred2, aes(x = timeseries, ymin = lb, ymax = ub, fill=Model), alpha = 0.25) +
labs(title=paste("Influx into GC B cells (as % of GC)"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal") +
ylim(0, 8) + guides(col="none", fill="none") +
scale_x_log10(limits=c(4, 30), breaks=c(5, 10, 20)) + #scale_y_log10(limits=c(1e-0, 10))
facet_wrap(~ Model, scales = "free")

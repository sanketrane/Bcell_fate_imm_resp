p4
Time_pred <- time_shape(seq(0, 50), out_table$mean[4], 0.001, out_table$mean[5])
p4 <- ggplot() +
geom_line(aes(x = seq(0, 50), y = Time_pred), col =4, size=1.52) +
labs(title=paste("Time dependent Loss rate"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p4
Time_pred <- time_shape(seq(0, 500), out_table$mean[4], 0.001, out_table$mean[5])
p4 <- ggplot() +
geom_line(aes(x = seq(0, 500), y = Time_pred), col =4, size=1.52) +
labs(title=paste("Time dependent Loss rate"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p4
Time_pred <- time_shape(seq(0, 500), out_table$mean[4], 0.01, out_table$mean[5])
p4 <- ggplot() +
geom_line(aes(x = seq(0, 500), y = Time_pred), col =4, size=1.52) +
labs(title=paste("Time dependent Loss rate"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p4
out_table$mean[5]
Time_pred <- time_shape(seq(0, 500), out_table$mean[4], 0.01, 10)
p4 <- ggplot() +
geom_line(aes(x = seq(0, 500), y = Time_pred), col =4, size=1.52) +
labs(title=paste("Time dependent Loss rate"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p4
time_shape <- function(Time, delta, nu, b0){
tau=14
#delta * exp(nu1 * Time)/(1 + exp(nu2 * (Time - tau)))
delta*(1 + exp(-nu * (Time - b0)^2))#/(1 + exp(nu2 * (Time - tau)))
#(delta*(1 - exp(-nu * Time)^1)) + b0
#(delta*(1 + (Time/nu)^2)) + b0
}
Time_pred <- time_shape(seq(0, 500), out_table$mean[4], 0.01, 10)
p4 <- ggplot() +
geom_line(aes(x = seq(0, 500), y = Time_pred), col =4, size=1.52) +
labs(title=paste("Time dependent Loss rate"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p4
time_shape <- function(Time, delta, nu, b0){
tau=14
#delta * exp(nu1 * Time)/(1 + exp(nu2 * (Time - tau)))
delta*(1 + exp(-nu * (Time - b0)^2))#/(1 + exp(nu2 * (Time - tau)))
#(delta*(1 - exp(-nu * Time)^1)) + b0
#(delta*(1 + (Time/nu)^2)) + b0
}
Time_pred <- time_shape(seq(0, 50), out_table$mean[4], 0.01, 10)
p4 <- ggplot() +
geom_line(aes(x = seq(0, 50), y = Time_pred), col =4, size=1.52) +
labs(title=paste("Time dependent Loss rate"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p4
Time_pred <- time_shape(seq(0, 50), out_table$mean[4], 0.02, 10)
p4 <- ggplot() +
geom_line(aes(x = seq(0, 50), y = Time_pred), col =4, size=1.52) +
labs(title=paste("Time dependent Loss rate"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p4
Time_pred <- time_shape(seq(0, 50), out_table$mean[4], 0.02, 30)
p4 <- ggplot() +
geom_line(aes(x = seq(0, 50), y = Time_pred), col =4, size=1.52) +
labs(title=paste("Time dependent Loss rate"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p4
Time_pred <- time_shape(seq(0, 50), out_table$mean[4], 0.005, 30)
p4 <- ggplot() +
geom_line(aes(x = seq(0, 50), y = Time_pred), col =4, size=1.52) +
labs(title=paste("Time dependent Loss rate"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p4
Time_pred <- time_shape(seq(0, 50), out_table$mean[4], 0.01, 20)
p4 <- ggplot() +
geom_line(aes(x = seq(0, 50), y = Time_pred), col =4, size=1.52) +
labs(title=paste("Time dependent Loss rate"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p4
Time_pred <- time_shape(seq(0, 50), out_table$mean[4], 0.0081, 20)
p4 <- ggplot() +
geom_line(aes(x = seq(0, 50), y = Time_pred), col =4, size=1.52) +
labs(title=paste("Time dependent Loss rate"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p4
Time_pred <- time_shape(seq(0, 50), out_table$mean[4], 0.0081, 24)
p4 <- ggplot() +
geom_line(aes(x = seq(0, 50), y = Time_pred), col =4, size=1.52) +
labs(title=paste("Time dependent Loss rate"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p4
Time_pred <- time_shape(seq(0, 50), out_table$mean[4], 0.001, 24)
p4 <- ggplot() +
geom_line(aes(x = seq(0, 50), y = Time_pred), col =4, size=1.52) +
labs(title=paste("Time dependent Loss rate"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p4
Time_pred <- time_shape(seq(0, 50), out_table$mean[4], 0.001, 14)
p4 <- ggplot() +
geom_line(aes(x = seq(0, 50), y = Time_pred), col =4, size=1.52) +
labs(title=paste("Time dependent Loss rate"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p4
Time_pred <- time_shape(seq(0, 50), out_table$mean[4], 0.01, 14)
p4 <- ggplot() +
geom_line(aes(x = seq(0, 50), y = Time_pred), col =4, size=1.52) +
labs(title=paste("Time dependent Loss rate"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p4
Time_pred <- time_shape(seq(0, 50), out_table$mean[4], 0.01, 24)
p4 <- ggplot() +
geom_line(aes(x = seq(0, 50), y = Time_pred), col =4, size=1.52) +
labs(title=paste("Time dependent Loss rate"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p4
plot(density(rnorm(1000, 24, 3)))
plot(density(rnorm(1000, 24, 4)))
## clearing the environment
rm(list = ls())
gc()
library(rstan)
library(loo)
library(tidyverse)
####################################################################################
## model specific details that needs to be change for every run
modelName <- "GC_desc_dens_timeLoss"
data_der <- "Bcell_imm_data.csv"
## Setting all the directories for opeartions
projectDir <- getwd()
scriptDir <- file.path(projectDir, "Rscripts")
modelDir <- file.path(projectDir, "models")
dataDir <- file.path(projectDir, "datafiles")
toolsDir <- file.path(scriptDir, "tools")
outputDir <- file.path(projectDir, "output_fit")
saveDir <- file.path(projectDir, 'save_csv')
# loadiong the scr# loadiong the script that contains functions for plotting stan parameters
source(file.path(toolsDir, "stanTools.R"))                # save results in new folder
# compiling multiple stan objects together that ran on different nodes
stanfit1 <- read_stan_csv(file.path(saveDir, paste0(modelName, "_1", ".csv")))
stanfit2 <- read_stan_csv(file.path(saveDir, paste0(modelName, "_2",".csv")))
stanfit3 <- read_stan_csv(file.path(saveDir, paste0(modelName, "_3", ".csv")))
stanfit4 <- read_stan_csv(file.path(saveDir, paste0(modelName, "_4",".csv")))
fit <- sflist2stanfit(list(stanfit1, stanfit2, stanfit3, stanfit4))
# finding the parameters used in the model
# using the last parameter("sigma4") in the array to get the total number of parameters set in the model
num_pars <- which(fit@model_pars %in% "sigma3")      # the variable "sigma4" will change depdending on the data used
parametersToPlot <- fit@model_pars[1:num_pars]
# number of post-burnin samples that are used for plotting
nPost <- nrow(fit)
################################################################################################
################################################################################################
## loading required datasets for plotting
imm_data <- read_csv(file.path(dataDir, data_der))
# ################################################################################################
# calculating PSIS-L00-CV for the fit
MZ_fractions_loglik <- extract_log_lik(fit, parameter_name = "log_lik1", merge_chains = TRUE)
GC_counts_loglik <- extract_log_lik(fit, parameter_name = "log_lik3", merge_chains = TRUE)
GC_fractions_loglik <- extract_log_lik(fit, parameter_name = "log_lik2", merge_chains = TRUE)
log_lik_comb <- cbind(MZ_fractions_loglik, GC_counts_loglik, GC_fractions_loglik)
# optional but recommended
ll_array <- extract_log_lik(fit, parameter_name = "log_lik1", merge_chains = FALSE)
r_eff <- relative_eff(exp(ll_array))
# loo-ic values
loo_loglik <- loo(log_lik_comb, save_psis = FALSE, cores = 8)
# Widely applicable AIC
AICw_lok <- waic(MZ_fractions_loglik, GC_counts_loglik, GC_fractions_loglik)
loo_loglik
ploocv <- data.frame("Model" = modelName,
"LooIC" = loo_loglik$estimates[3],
"SE" = loo_loglik$estimates[6],
"PLoo" = loo_loglik$estimates[2])
write.table(ploocv, file = file.path(outputDir, "stat_table.csv"),
sep = ",", append = TRUE, quote = FALSE,
col.names = FALSE, row.names = FALSE)
################################################################################################
################################################################################################
## posterior predictive distributions
# time sequence for predictions
ts_pred <- seq(0, 30, length.out = 300)
numPred <- length(ts_pred)
#### plotting style
myTheme <- theme(text = element_text(size = 12), axis.text = element_text(size = 12),
axis.title =  element_text(size = 12, face = "bold"),
plot.title = element_text(size=12,  hjust = 0.5, face = "bold"),
legend.background = element_blank(), legend.key = element_blank())
# setting ggplot theme for rest fo the plots
theme_set(theme_bw())
####### plotting
fancy_scientific <- function(l) {
# turn in to character string in scientific notation
l <- format(l, scientific = TRUE)
# quote the part before the exponent to keep all the digits
l <- gsub("^(.*)e", "'\\1'e", l)
# remove + after exponent, if exists. E.g.: (e^+2 -> e^2)
l <- gsub("e\\+","e",l)
# turn the 'e' into plotmath format
l <- gsub("e", "%*%10^", l)
# convert 1x10^ or 1.000x10^ -> 10^
l <- gsub("\\'1[\\.0]*\\'\\%\\*\\%", "", l)
# return this as an expression
parse(text=l)
}
log10minorbreaks=as.numeric(1:10 %o% 10^(4:8))
Y1pred <- as.data.frame(fit, pars = "y1_mean_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.045),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.955)) %>%
bind_cols("timeseries" = ts_pred)
MZfractions_pred <- as.data.frame(fit, pars = "MZfractions_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.045),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.955))%>%
bind_cols("timeseries" = ts_pred)
Y2pred <- as.data.frame(fit, pars = "y2_mean_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.045),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.955))%>%
bind_cols("timeseries" = ts_pred)
GCfractions_pred <- as.data.frame(fit, pars = "GCfractions_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.045),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.955))%>%
bind_cols("timeseries" = ts_pred)
Y3pred <- as.data.frame(fit, pars = "y3_mean_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.045),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.955)) %>%
bind_cols("timeseries" = ts_pred)
GCcounts_pred <- as.data.frame(fit, pars = "GCcounts_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.045),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.955))%>%
bind_cols("timeseries" = ts_pred)
#### plots
p1 <- ggplot() +
geom_line(data = Y1pred, aes(x = timeseries, y = median), col =2) +
geom_ribbon(data = Y1pred, aes(x = timeseries, ymin = lb, ymax = ub), fill=2, alpha = 0.25)+
#geom_ribbon(data = MZfractions_pred, aes(x = timeseries, ymin = lb, ymax = ub), fill=2, alpha = 0.25)+
geom_point(data = imm_data, aes(x = days.post.imm, y = fraction_CAR_MZ), col=2) +
labs(title=paste("Fraction CAR in MZ B cells"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p2 <- ggplot() +
geom_line(data = Y2pred, aes(x = timeseries, y = median), col =6) +
geom_ribbon(data = Y2pred, aes(x = timeseries, ymin = lb, ymax = ub), fill=6, alpha = 0.25)+
geom_point(data = imm_data, aes(x = days.post.imm, y = fraction_CAR_GC), col=6) +
labs(title=paste("Fraction CAR in GC B cells"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p3 <- ggplot() +
geom_line(data = Y3pred, aes(x = timeseries, y = median), col =4) +
geom_ribbon(data = Y3pred, aes(x = timeseries, ymin = lb, ymax = ub), fill=4, alpha = 0.25)+
#geom_ribbon(data = GCcounts_pred, aes(x = timeseries, ymin = lb, ymax = ub), fill=4, alpha = 0.25)+
geom_point(data = imm_data, aes(x = days.post.imm, y = GCB_cell_numbers), col=4) +
labs(title=paste("Total numbers of GC B cells"),  y=NULL, x="Days post immunization") +
scale_y_continuous(limits = c(1e4, 2e7), trans="log10", breaks=c(1e4, 1e5, 1e6, 1e7, 1e8), minor_breaks = log10minorbreaks, labels =fancy_scientific) +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
### Residual plots
resid_d1  <- t(as.data.frame(fit, pars = "resid_d1"))[,1]
resid_d2  <- t(as.data.frame(fit, pars = "resid_d2"))[,1]
resid_d3  <- t(as.data.frame(fit, pars = "resid_d3"))[,1]
p1.1 <- ggplot() +
geom_hline(yintercept = 0, linetype=2) +
geom_point(data = (imm_data), aes(x = days.post.imm, y = resid_d1), col=2) +
labs(title=paste("Residuals MZ Fractions fit"),  y=NULL, x="Time") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p2.1 <- ggplot() +
geom_hline(yintercept = 0, linetype=2) +
geom_point(data = imm_data, aes(x = days.post.imm, y = resid_d2), col=6) +
labs(title=paste("Residuals GC Fractions fit"),  y=NULL, x="Time") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p3.1 <- ggplot() +
geom_hline(yintercept = 0, linetype=2) +
geom_point(data = imm_data, aes(x = days.post.imm, y = resid_d3), col=4) +
labs(title=paste("Residuals GC counts fit"),  y=NULL, x="Time") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
cowplot::plot_grid(p1, p2,  p3, p1.1, p2.1, p3.1, nrow  = 2)
## saving  plots for quality control
pdf(file = file.path(outputDir, paste(modelName,"StanPlots%03d.pdf", sep = "")),
width = 11, height = 6.5, onefile = FALSE, useDingbats = FALSE)
cowplot::plot_grid(p1, p2,  p3, p1.1, p2.1, p3.1, nrow  = 2)
dev.off()
################################################################################################
### parameters table
ptable <- monitor(as.array(fit, pars = parametersToPlot), warmup = 0, print = FALSE)
out_table <- ptable[1:num_pars, c(1, 3, 4, 8)]
out_table
write.csv(out_table, file = file.path(outputDir, paste0('params_', modelName, ".csv")))
time_shape <- function(Time, delta, nu, b0){
tau=14
#delta * exp(nu1 * Time)/(1 + exp(nu2 * (Time - tau)))
delta*(1 + exp(-nu * (Time - b0)^2))#/(1 + exp(nu2 * (Time - tau)))
#(delta*(1 - exp(-nu * Time)^1)) + b0
#(delta*(1 + (Time/nu)^2)) + b0
}
Time_pred <- time_shape(seq(0, 50), out_table$mean[4], out_table$mean[3], out_table$mean[5])
p4 <- ggplot() +
geom_line(aes(x = seq(0, 50), y = Time_pred), col =4, size=1.52) +
labs(title=paste("Time dependent Loss rate"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p4
dev.off()
p4 <- ggplot() +
geom_line(aes(x = seq(0, 50), y = Time_pred), col =4, size=1.52) +
labs(title=paste("Time dependent Loss rate"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p4
Time_pred <- time_shape(seq(0, 30), out_table$mean[4], out_table$mean[3], out_table$mean[5])
p4 <- ggplot() +
geom_line(aes(x = seq(0, 30), y = Time_pred), col =4, size=1.52) +
labs(title=paste("Time dependent Loss rate"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p4
Time_pred <- time_shape(seq(0, 30, length.out=100), out_table$mean[4], out_table$mean[3], out_table$mean[5])
p4 <- ggplot() +
geom_line(aes(x = seq(0, 30, length.out=100), y = Time_pred), col =4, size=1.52) +
labs(title=paste("Time dependent Loss rate"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p4
cowplot::plot_grid(p1, p2,  p3, p1.1, p2.1, p3.1, nrow  = 2)
## saving  plots for quality control
pdf(file = file.path(outputDir, paste(modelName,"StanPlots%03d.pdf", sep = "")),
width = 11, height = 6.5, onefile = FALSE, useDingbats = FALSE)
cowplot::plot_grid(p1, p2,  p3, p1.1, p2.1, p3.1, nrow  = 2)
dev.off()
################################################################################################
### parameters table
ptable <- monitor(as.array(fit, pars = parametersToPlot), warmup = 0, print = FALSE)
out_table <- ptable[1:num_pars, c(1, 3, 4, 8)]
out_table
write.csv(out_table, file = file.path(outputDir, paste0('params_', modelName, ".csv")))
time_shape <- function(Time, delta, nu, b0){
tau=14
#delta * exp(nu1 * Time)/(1 + exp(nu2 * (Time - tau)))
delta*(1 + exp(-nu * (Time - b0)^2))#/(1 + exp(nu2 * (Time - tau)))
#(delta*(1 - exp(-nu * Time)^1)) + b0
#(delta*(1 + (Time/nu)^2)) + b0
}
Time_pred <- time_shape(seq(0, 30, length.out=100), out_table$mean[4], out_table$mean[3], out_table$mean[5])
p4 <- ggplot() +
geom_line(aes(x = seq(0, 30, length.out=100), y = Time_pred), col =4, size=1.52) +
labs(title=paste("Time dependent Loss rate"),  y=NULL, x="Days post immunization") +
myTheme + theme(legend.position = c(0.5, 0.85), legend.direction = "horizontal")
p4
## saving  plots for quality control
pdf(file = file.path(outputDir, paste(modelName,"ExtraPlots%03d.pdf", sep = "")),
width = 6, height = 4.5, onefile = FALSE, useDingbats = FALSE)
p4
dev.off()
out_table
1/0.96
log(2)/0.96
gc()
rm(list = ls()); gc();
############################################################
### Preamble
############################################################
## loading libraries
library(tidyverse)
library(readxl)
#### plotting style
myTheme <- theme(text = element_text(size = 12), axis.text = element_text(size = 12),
axis.title =  element_text(size = 12, face = "bold"),
plot.title = element_text(size=12,  hjust = 0.5, face = "bold"),
legend.background = element_blank(), legend.key = element_blank())
# setting ggplot theme for rest fo the plots
theme_set(theme_bw())
fancy_scientific <- function(l) {
# turn in to character string in scientific notation
l <- format(l, scientific = TRUE)
# quote the part before the exponent to keep all the digits
l <- gsub("^(.*)e", "'\\1'e", l)
# remove + after exponent, if exists. E.g.: (e^+2 -> e^2)
l <- gsub("e\\+","e",l)
# turn the 'e' into plotmath format
l <- gsub("e", "%*%10^", l)
# convert 1x10^ or 1.000x10^ -> 10^
l <- gsub("\\'1[\\.0]*\\'\\%\\*\\%", "", l)
# return this as an expression
parse(text=l)
}
log10minorbreaks = as.numeric(1:10 %o% 10^(-4:8))
############################################################
############################################################
## import data
############################################################
## Immune response dynamics of B cells -- reporter induction upon b cell activation
NEW_CAR_prop_df <- read_excel("datafiles/NEW_CAR_fractions_TD_response.xlsx", sheet =1) %>%
filter(genotype == "CAR") %>%
select(-contains("counts"), -contains("PCs")) %>%
gather(-c(days.post.imm, genotype), key = 'subpop', value='fraction_cells')
ggplot() +
geom_point(data=NEW_NEW_CAR_prop_df,
aes(x= as.factor(days.post.imm), y=fraction_cells), col = 4) +
scale_y_log10() +
labs(x='Days post immunization', y='% CAR+')+
facet_wrap(.~ subpop) + myTheme + guides(col="none")
## Immune response dynamics of B cells -- reporter induction upon b cell activation
B_cell_data <- read_excel("datafiles/NEW_CAR_fractions_TD_response.xlsx", sheet =1) %>%
# filter(genotype == "CAR")
mutate(B_cell_numbers = (total_B_cells/100) * total_splenic_counts_millions * 1e6,
FOB_cell_numbers = (total_FOBs/100) * B_cell_numbers,
MZB_cell_numbers = (total_MZBs/100) * B_cell_numbers,
GCB_cell_numbers = (total_Gcs/100) * B_cell_numbers,
PCB_cell_numbers = (total_PCs/100) * B_cell_numbers,
CAR_B_numbers = (fraction_CAR_in_Bcells/100) * B_cell_numbers,
CAR_FOB_numbers = (fraction_CAR_in_FOBs/100) * FOB_cell_numbers,
CAR_MZB_numbers = (fraction_CAR_in_MZBs/100) * MZB_cell_numbers,
CAR_GCB_numbers = (fraction_CAR_in_GCs/100)* GCB_cell_numbers,
CAR_PCB_numbers = (fraction_CAR_in_PCs/100)* PCB_cell_numbers)
B_cell_counts_df <- B_cell_data %>%
select(-contains("CAR"))%>%
select(days.post.imm, genotype, contains('numbers')) %>%
gather(-c(days.post.imm, genotype), key = 'subpop', value='cell_numbers') %>% na.omit()
CAR_cell_counts_df <- B_cell_data %>%
select(days.post.imm, genotype, contains("CAR"))%>%
select(days.post.imm, genotype, contains('numbers')) %>%
gather(-c(days.post.imm, genotype), key = 'subpop', value='cell_numbers') %>% na.omit()
facet_labels1 <- c(`B_cell_numbers` = "Total B cells",
`FOB_cell_numbers` = "FO B cells",
`MZB_cell_numbers` = "MZ B cells",
`GCB_cell_numbers` = "GC B cells",
`PCB_cell_numbers` = "PC B cells")
ggplot() +
geom_point(data = filter(B_cell_counts_df, genotype == "CAR"),
aes(x= (days.post.imm), y=cell_numbers, col = subpop)) +
scale_y_log10(limits = c(1e4, 1e8)) +
labs(x='Days post immunization', y='Cell counts')+
facet_wrap(.~ subpop, labeller = as_labeller(facet_labels1)) + myTheme + guides(col="none")
facet_labels2 <- c(`CAR_B_numbers` = "Total B cells",
`CAR_FOB_numbers` = "FO B cells",
`CAR_MZB_numbers` = "MZ B cells",
`CAR_GCB_numbers` = "GC B cells",
`CAR_PCB_numbers` = "PC B cells")
ggplot() +
geom_point(data = filter(CAR_cell_counts_df, genotype == "CAR"),
aes(x= (days.post.imm), y=cell_numbers, col = subpop)) +
scale_y_log10(limits = c(1e3, 1e7)) +
labs(x='Days post immunization', y='Number of CAR+ Cells')+
facet_wrap(.~ subpop, labeller = as_labeller(facet_labels2)) + myTheme + guides(col="none")
# Modeling Precursor Dynamics
phi_func <- function(t, b0, r, nu){
tau = 7
#exp(b0) * (1 +  t * exp(-nu * t))
exp(b0) * exp(r *t)/(1 +  exp(nu * (t - tau)))
}
sol_time <- seq(0, 30, length.out=200)
repFOB_nlm <- nls((fraction_cells/100) ~ phi_func(days.post.imm, b0,r, nu),
data = filter(NEW_CAR_prop_df, subpop == "fraction_CAR_in_FOBs"),
start = list(b0=-3, r=0.1, nu=0.5))
par_est <- coef(repFOB_nlm)
phi_vec_m <- sapply(sol_time, phi_func, b0=par_est[1], r=par_est[2], nu=par_est[3])
ggplot() +
#geom_line(aes(x=sol_time, y=phi_vec))+
geom_line(aes(x=sol_time, y=phi_vec_m), col=2)+
geom_point(data=filter(NEW_CAR_prop_df, subpop == "fraction_CAR_in_FOBs"),
aes(x=days.post.imm, y=fraction_cells/100))
# Modeling Precursor Dynamics
phi_func <- function(t, b0, r, nu){
tau = 7
#exp(b0) * (1 +  t * exp(-nu * t))
exp(b0) * exp(r *t)/(1 +  exp(nu * (t - tau)))
}
sol_time <- seq(0, 30, length.out=200)
repFOB_nlm <- nls((fraction_cells/100) ~ phi_func(days.post.imm, b0,r, nu),
data = filter(NEW_CAR_prop_df, subpop == "fraction_CAR_in_FOBs"),
start = list(b0=-3, r=0.1, nu=0.5))
par_est <- coef(repFOB_nlm)
phi_vec_m <- sapply(sol_time, phi_func, b0=par_est[1], r=par_est[2], nu=par_est[3])
ggplot() +
#geom_line(aes(x=sol_time, y=phi_vec))+
geom_line(aes(x=sol_time, y=phi_vec_m), col=2)+
geom_point(data=filter(NEW_CAR_prop_df, subpop == "fraction_CAR_in_FOBs"),
aes(x=days.post.imm, y=fraction_cells/100))
par_est
repFOB_nlm <- nls((fraction_cells/100) ~ phi_func(days.post.imm, b0,r, nu),
data = filter(NEW_CAR_prop_df, subpop == "fraction_CAR_in_FOBs"),
start = list(b0=-3, r=0.01, nu=0.5))
par_est <- coef(repFOB_nlm)
phi_vec_m <- sapply(sol_time, phi_func, b0=par_est[1], r=par_est[2], nu=par_est[3])
ggplot() +
#geom_line(aes(x=sol_time, y=phi_vec))+
geom_line(aes(x=sol_time, y=phi_vec_m), col=2)+
geom_point(data=filter(NEW_CAR_prop_df, subpop == "fraction_CAR_in_FOBs"),
aes(x=days.post.imm, y=fraction_cells/100))
# generating data for fitting
imm_data <- B_cell_data %>% filter(genotype == "CAR") %>%
select(days.post.imm, contains("MZ"), contains("GC"), -contains("fraction"), -total_MZBs) %>%
mutate(fraction_CAR_MZ = CAR_MZB_numbers/MZB_cell_numbers,
fraction_CAR_GC = CAR_GCB_numbers/GCB_cell_numbers)%>%
select(days.post.imm, MZB_cell_numbers, GCB_cell_numbers, fraction_CAR_MZ, fraction_CAR_GC)
imm_data %>%
filter(days.post.imm == 0) %>%
summarise("countsMZ" = log(mean(MZB_cell_numbers)),
"fractionMZ" = mean(fraction_CAR_MZ),
"countsGC" = log(mean(GCB_cell_numbers)),
"fractionGC" = mean(fraction_CAR_GC))
View(B_cell_data)
# generating data for fitting
imm_N2ko_data <- B_cell_data %>% filter(genotype == "N2KO") %>%
select(days.post.imm, contains("MZ"), contains("GC"), -contains("fraction"), -total_MZBs) %>%
mutate(fraction_CAR_MZ = CAR_MZB_numbers/MZB_cell_numbers,
fraction_CAR_GC = CAR_GCB_numbers/GCB_cell_numbers)%>%
select(days.post.imm, MZB_cell_numbers, GCB_cell_numbers, fraction_CAR_MZ, fraction_CAR_GC)
View(imm_N2ko_data)

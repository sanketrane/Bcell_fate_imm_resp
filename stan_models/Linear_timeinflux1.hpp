
// Code generated by stanc d507af0
#include <stan/model/model_header.hpp>
namespace Linear_timeinflux1_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 197> locations_array__ = 
{" (found before start of program)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 73, column 2 to column 24)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 74, column 2 to column 23)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 75, column 2 to column 21)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 76, column 2 to column 24)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 77, column 2 to column 28)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 78, column 2 to column 38)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 79, column 2 to column 21)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 80, column 2 to column 23)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 83, column 2 to column 25)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 84, column 2 to column 25)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 85, column 2 to column 25)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 90, column 2 to column 26)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 92, column 2 to column 34)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 93, column 2 to column 34)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 94, column 2 to column 36)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 95, column 2 to column 36)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 97, column 2 to column 16)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 98, column 2 to column 20)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 100, column 2 to column 27)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 101, column 2 to column 27)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 102, column 2 to column 31)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 105, column 2 to column 25)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 106, column 2 to column 25)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 107, column 2 to column 29)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 109, column 2 to column 19)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 110, column 2 to column 18)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 111, column 2 to column 16)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 112, column 2 to column 19)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 113, column 2 to column 23)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 114, column 2 to column 25)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 115, column 2 to column 16)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 117, column 2 to column 23)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 119, column 2 to column 62)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 122, column 4 to column 52)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 123, column 4 to column 52)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 121, column 22 to line 124, column 3)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 121, column 2 to line 124, column 3)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 127, column 4 to column 54)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 128, column 4 to column 54)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 126, column 22 to line 129, column 3)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 126, column 2 to line 129, column 3)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 156, column 3 to column 31)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 158, column 3 to column 30)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 158, column 31 to column 58)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 158, column 59 to column 86)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 158, column 87 to column 114)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 159, column 3 to column 32)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 159, column 33 to column 62)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 159, column 63 to column 92)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 160, column 3 to column 28)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 160, column 30 to column 54)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 162, column 3 to column 35)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 162, column 36 to column 68)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 163, column 3 to column 37)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 163, column 38 to column 72)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 165, column 3 to column 28)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 165, column 29 to column 54)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 165, column 55 to column 80)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 165, column 81 to column 106)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 167, column 3 to column 28)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 167, column 29 to column 54)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 167, column 55 to column 80)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 167, column 81 to column 106)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 170, column 3 to column 29)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 171, column 3 to column 65)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 176, column 5 to column 40)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 177, column 5 to column 74)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 179, column 5 to column 40)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 180, column 5 to column 74)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 183, column 5 to column 40)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 184, column 5 to column 76)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 186, column 5 to column 40)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 187, column 5 to column 76)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 190, column 5 to column 59)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 191, column 5 to column 63)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 192, column 5 to column 85)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 194, column 5 to column 63)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 195, column 5 to column 112)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 174, column 23 to line 196, column 4)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 174, column 3 to line 196, column 4)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 200, column 5 to column 69)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 201, column 5 to column 69)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 203, column 5 to column 90)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 204, column 5 to column 90)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 199, column 24 to line 205, column 4)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 199, column 3 to line 205, column 4)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 209, column 5 to column 73)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 210, column 5 to column 73)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 212, column 5 to column 94)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 213, column 5 to column 94)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 208, column 24 to line 214, column 4)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 208, column 3 to line 214, column 4)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 134, column 2 to column 28)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 135, column 2 to column 27)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 136, column 2 to column 25)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 137, column 2 to column 25)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 138, column 2 to column 27)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 139, column 2 to column 31)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 140, column 2 to column 33)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 141, column 2 to column 24)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 143, column 2 to column 26)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 144, column 2 to column 26)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 145, column 2 to column 26)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 148, column 2 to column 62)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 149, column 2 to column 62)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 150, column 2 to column 66)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 151, column 2 to column 66)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 57, column 2 to column 26)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 58, column 2 to column 26)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 59, column 2 to column 27)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 60, column 2 to column 26)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 61, column 30 to column 37)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 61, column 2 to column 39)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 62, column 30 to column 37)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 62, column 2 to column 39)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 63, column 29 to column 37)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 63, column 2 to column 39)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 64, column 32 to column 39)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 64, column 2 to column 41)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 65, column 32 to column 39)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 65, column 2 to column 41)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 66, column 34 to column 41)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 66, column 2 to column 43)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 67, column 34 to column 41)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 67, column 2 to column 43)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 68, column 15 to column 22)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 68, column 2 to column 24)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 90, column 13 to column 21)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 92, column 25 to column 32)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 93, column 25 to column 32)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 94, column 27 to column 34)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 95, column 27 to column 34)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 156, column 19 to column 26)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 158, column 21 to column 28)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 158, column 49 to column 56)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 158, column 77 to column 84)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 158, column 105 to column 112)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 159, column 23 to column 30)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 159, column 53 to column 60)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 159, column 83 to column 90)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 160, column 19 to column 26)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 160, column 45 to column 52)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 162, column 26 to column 33)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 162, column 59 to column 66)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 163, column 28 to column 35)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 163, column 63 to column 70)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 165, column 10 to column 17)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 165, column 36 to column 43)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 165, column 62 to column 69)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 165, column 88 to column 95)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 167, column 10 to column 17)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 167, column 36 to column 43)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 167, column 62 to column 69)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 167, column 88 to column 95)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 4, column 4 to column 29)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 4, column 30 to column 54)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 4, column 55 to column 74)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 4, column 75 to column 94)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 4, column 95 to column 106)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 5, column 4 to column 74)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 6, column 4 to column 17)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 3, column 34 to line 7, column 4)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 10, column 4 to column 25)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 10, column 26 to column 43)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 10, column 44 to column 60)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 11, column 4 to column 53)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 12, column 4 to column 17)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 9, column 35 to line 13, column 4)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 16, column 4 to column 24)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 16, column 25 to column 41)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 16, column 42 to column 55)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 17, column 4 to column 53)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 18, column 4 to column 17)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 15, column 28 to line 19, column 4)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 24, column 5 to column 27)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 25, column 5 to column 26)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 26, column 5 to column 24)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 27, column 5 to column 27)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 28, column 5 to column 31)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 29, column 5 to column 33)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 30, column 5 to column 24)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 32, column 5 to column 19)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 33, column 5 to column 56)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 34, column 5 to column 54)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 37, column 5 to column 18)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 39, column 5 to column 59)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 41, column 5 to column 80)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 43, column 5 to column 70)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 44, column 5 to column 17)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 22, column 81 to line 45, column 4)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 49, column 5 to column 35)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 50, column 16 to column 22)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 50, column 5 to column 27)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 51, column 5 to column 88)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 52, column 5 to column 18)",
 " (in 'Bcell_fate_imm_resp/stan_models/Linear_timeinflux1.stan', line 47, column 76 to line 53, column 4)"};

struct CAR_negative_MZB_functor__ {
  template <typename T0__,
            stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  operator()(const T0__& time, std::ostream* pstream__) const;
};
struct ODE_sys_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  std::vector<stan::promote_args_t<T0__, T1__, T2__, T3__>>
  operator()(const T0__& time, const std::vector<T1__>& y,
             const std::vector<T2__>& parms, const std::vector<T3__>& rdata,
             const std::vector<int>& idata, std::ostream* pstream__) const;
};
struct Total_FoB_functor__ {
  template <typename T0__,
            stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  operator()(const T0__& time, std::ostream* pstream__) const;
};
struct solve_ODE_sys_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>>* = nullptr>
  std::vector<std::vector<stan::promote_args_t<T0__, T1__, T2__>>>
  operator()(const std::vector<T0__>& solve_time,
             const std::vector<T1__>& init_cond,
             const std::vector<T2__>& parms, std::ostream* pstream__) const;
};
struct CAR_positive_FOB_functor__ {
  template <typename T0__,
            stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  operator()(const T0__& time, std::ostream* pstream__) const;
};

template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  CAR_positive_FOB(const T0__& time, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ F0 = DUMMY_VAR__;
      current_statement__ = 155;
      F0 = stan::math::exp(11.722278);
      local_scalar_t__ B0 = DUMMY_VAR__;
      current_statement__ = 156;
      B0 = stan::math::exp(4.475064);
      local_scalar_t__ n = DUMMY_VAR__;
      current_statement__ = 157;
      n = 4.781548;
      local_scalar_t__ X = DUMMY_VAR__;
      current_statement__ = 158;
      X = 6.943644;
      local_scalar_t__ q = DUMMY_VAR__;
      current_statement__ = 159;
      q = 5;
      local_scalar_t__ value = DUMMY_VAR__;
      current_statement__ = 160;
      value = (F0 +
                ((B0 * stan::math::pow(time, n)) *
                  (1 -
                    (stan::math::pow(time, q) /
                      (stan::math::pow(X, q) + stan::math::pow(time, q))))));
      current_statement__ = 161;
      return value;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  CAR_negative_MZB(const T0__& time, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ M0 = DUMMY_VAR__;
      current_statement__ = 163;
      M0 = stan::math::exp(14.06);
      local_scalar_t__ nu = DUMMY_VAR__;
      current_statement__ = 164;
      nu = 0.0033;
      local_scalar_t__ b0 = DUMMY_VAR__;
      current_statement__ = 165;
      b0 = 20.58;
      local_scalar_t__ value = DUMMY_VAR__;
      current_statement__ = 166;
      value = (M0 *
                (1 +
                  stan::math::exp((-nu * stan::math::pow((time - b0), 2)))));
      current_statement__ = 167;
      return value;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  Total_FoB(const T0__& time, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ M0 = DUMMY_VAR__;
      current_statement__ = 169;
      M0 = stan::math::exp(16.7);
      local_scalar_t__ nu = DUMMY_VAR__;
      current_statement__ = 170;
      nu = 0.004;
      local_scalar_t__ b0 = DUMMY_VAR__;
      current_statement__ = 171;
      b0 = 20;
      local_scalar_t__ value = DUMMY_VAR__;
      current_statement__ = 172;
      value = (M0 *
                (1 +
                  stan::math::exp((-nu * stan::math::pow((time - b0), 2)))));
      current_statement__ = 173;
      return value;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
  std::vector<stan::promote_args_t<T0__, T1__, T2__, T3__>>
  ODE_sys(const T0__& time, const std::vector<T1__>& y,
          const std::vector<T2__>& parms, const std::vector<T3__>& rdata,
          const std::vector<int>& idata, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 175;
      alpha = stan::model::rvalue(parms, "parms", stan::model::index_uni(1));
      local_scalar_t__ beta = DUMMY_VAR__;
      current_statement__ = 176;
      beta = stan::model::rvalue(parms, "parms", stan::model::index_uni(2));
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 177;
      mu = stan::model::rvalue(parms, "parms", stan::model::index_uni(3));
      local_scalar_t__ delta = DUMMY_VAR__;
      current_statement__ = 178;
      delta = stan::model::rvalue(parms, "parms", stan::model::index_uni(4));
      local_scalar_t__ lambda_WT = DUMMY_VAR__;
      current_statement__ = 179;
      lambda_WT = stan::model::rvalue(parms, "parms",
                    stan::model::index_uni(5));
      local_scalar_t__ lambda_N2KO = DUMMY_VAR__;
      current_statement__ = 180;
      lambda_N2KO = stan::model::rvalue(parms, "parms",
                      stan::model::index_uni(6));
      local_scalar_t__ nu = DUMMY_VAR__;
      current_statement__ = 181;
      nu = stan::model::rvalue(parms, "parms", stan::model::index_uni(7));
      local_scalar_t__ t0 = DUMMY_VAR__;
      current_statement__ = 182;
      t0 = 4.0;
      local_scalar_t__ alpha_tau = DUMMY_VAR__;
      current_statement__ = 183;
      alpha_tau = (alpha /
                    (1 +
                      stan::math::exp((nu * stan::math::pow((time - t0), 2)))));
      local_scalar_t__ beta_tau = DUMMY_VAR__;
      current_statement__ = 184;
      beta_tau = (beta /
                   (1 +
                     stan::math::exp((nu * stan::math::pow((time - t0), 2)))));
      std::vector<local_scalar_t__> dydt =
         std::vector<local_scalar_t__>(3, DUMMY_VAR__);
      current_statement__ = 186;
      stan::model::assign(dydt,
        ((alpha_tau * Total_FoB(time, pstream__)) -
          (delta * stan::model::rvalue(y, "y", stan::model::index_uni(1)))),
        "assigning variable dydt", stan::model::index_uni(1));
      current_statement__ = 187;
      stan::model::assign(dydt,
        (((mu * stan::model::rvalue(y, "y", stan::model::index_uni(1))) +
           (beta_tau * CAR_negative_MZB(time, pstream__))) -
          (lambda_WT *
            stan::model::rvalue(y, "y", stan::model::index_uni(2)))),
        "assigning variable dydt", stan::model::index_uni(2));
      current_statement__ = 188;
      stan::model::assign(dydt,
        ((beta_tau * CAR_negative_MZB(time, pstream__)) -
          (lambda_N2KO *
            stan::model::rvalue(y, "y", stan::model::index_uni(3)))),
        "assigning variable dydt", stan::model::index_uni(3));
      current_statement__ = 189;
      return dydt;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
  std::vector<std::vector<stan::promote_args_t<T0__, T1__, T2__>>>
  solve_ODE_sys(const std::vector<T0__>& solve_time,
                const std::vector<T1__>& init_cond,
                const std::vector<T2__>& parms, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int numdim = std::numeric_limits<int>::min();
      current_statement__ = 191;
      numdim = stan::math::size(solve_time);
      current_statement__ = 192;
      stan::math::validate_non_negative_index("y_sol", "numdim", numdim);
      std::vector<std::vector<local_scalar_t__>> y_sol =
         std::vector<std::vector<local_scalar_t__>>(numdim, 
           std::vector<local_scalar_t__>(3, DUMMY_VAR__));
      current_statement__ = 194;
      stan::model::assign(y_sol,
        stan::math::integrate_ode_rk45(ODE_sys_functor__(), init_cond, 4.0,
          solve_time, parms, std::vector<double>{0.0}, std::vector<int>{0},
          pstream__), "assigning variable y_sol");
      current_statement__ = 195;
      return y_sol;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
CAR_negative_MZB_functor__::operator()(const T0__& time,
                                       std::ostream* pstream__)  const
{
  return CAR_negative_MZB(time, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
std::vector<stan::promote_args_t<T0__, T1__, T2__, T3__>>
ODE_sys_functor__::operator()(const T0__& time, const std::vector<T1__>& y,
                              const std::vector<T2__>& parms,
                              const std::vector<T3__>& rdata,
                              const std::vector<int>& idata,
                              std::ostream* pstream__)  const
{
  return ODE_sys(time, y, parms, rdata, idata, pstream__);
}

template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
Total_FoB_functor__::operator()(const T0__& time, std::ostream* pstream__) 
const
{
  return Total_FoB(time, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
std::vector<std::vector<stan::promote_args_t<T0__, T1__, T2__>>>
solve_ODE_sys_functor__::operator()(const std::vector<T0__>& solve_time,
                                    const std::vector<T1__>& init_cond,
                                    const std::vector<T2__>& parms,
                                    std::ostream* pstream__)  const
{
  return solve_ODE_sys(solve_time, init_cond, parms, pstream__);
}

template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
CAR_positive_FOB_functor__::operator()(const T0__& time,
                                       std::ostream* pstream__)  const
{
  return CAR_positive_FOB(time, pstream__);
}


class Linear_timeinflux1_model final : public model_base_crtp<Linear_timeinflux1_model> {

 private:
  int numObs1;
  int numObs2;
  int n_shards;
  int numPred;
  std::vector<int> time_index1;
  std::vector<int> time_index2;
  std::vector<double> solve_time;
  std::vector<double> CAR_MZ_counts;
  std::vector<double> CAR_GC_counts;
  std::vector<double> CAR_MZN2_counts;
  std::vector<double> CAR_GCN2_counts;
  std::vector<double> ts_pred; 
  
 
 public:
  ~Linear_timeinflux1_model() { }
  
  inline std::string model_name() const final { return "Linear_timeinflux1_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 d507af0", "stancflags = "};
  }
  
  
  Linear_timeinflux1_model(stan::io::var_context& context__,
                           unsigned int random_seed__ = 0,
                           std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "Linear_timeinflux1_model_namespace::Linear_timeinflux1_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 108;
      context__.validate_dims("data initialization","numObs1","int",
           std::vector<size_t>{});
      numObs1 = std::numeric_limits<int>::min();
      
      
      current_statement__ = 108;
      numObs1 = context__.vals_i("numObs1")[(1 - 1)];
      current_statement__ = 108;
      stan::math::check_greater_or_equal(function__, "numObs1", numObs1, 1);
      current_statement__ = 109;
      context__.validate_dims("data initialization","numObs2","int",
           std::vector<size_t>{});
      numObs2 = std::numeric_limits<int>::min();
      
      
      current_statement__ = 109;
      numObs2 = context__.vals_i("numObs2")[(1 - 1)];
      current_statement__ = 109;
      stan::math::check_greater_or_equal(function__, "numObs2", numObs2, 1);
      current_statement__ = 110;
      context__.validate_dims("data initialization","n_shards","int",
           std::vector<size_t>{});
      n_shards = std::numeric_limits<int>::min();
      
      
      current_statement__ = 110;
      n_shards = context__.vals_i("n_shards")[(1 - 1)];
      current_statement__ = 110;
      stan::math::check_greater_or_equal(function__, "n_shards", n_shards, 1);
      current_statement__ = 111;
      context__.validate_dims("data initialization","numPred","int",
           std::vector<size_t>{});
      numPred = std::numeric_limits<int>::min();
      
      
      current_statement__ = 111;
      numPred = context__.vals_i("numPred")[(1 - 1)];
      current_statement__ = 111;
      stan::math::check_greater_or_equal(function__, "numPred", numPred, 1);
      current_statement__ = 112;
      stan::math::validate_non_negative_index("time_index1", "numObs1",
                                              numObs1);
      current_statement__ = 113;
      context__.validate_dims("data initialization","time_index1","int",
           std::vector<size_t>{static_cast<size_t>(numObs1)});
      time_index1 = 
        std::vector<int>(numObs1, std::numeric_limits<int>::min());
      
      
      current_statement__ = 113;
      time_index1 = context__.vals_i("time_index1");
      current_statement__ = 113;
      stan::math::check_greater_or_equal(function__, "time_index1",
                                            time_index1, 1);
      current_statement__ = 114;
      stan::math::validate_non_negative_index("time_index2", "numObs2",
                                              numObs2);
      current_statement__ = 115;
      context__.validate_dims("data initialization","time_index2","int",
           std::vector<size_t>{static_cast<size_t>(numObs2)});
      time_index2 = 
        std::vector<int>(numObs2, std::numeric_limits<int>::min());
      
      
      current_statement__ = 115;
      time_index2 = context__.vals_i("time_index2");
      current_statement__ = 115;
      stan::math::check_greater_or_equal(function__, "time_index2",
                                            time_index2, 1);
      current_statement__ = 116;
      stan::math::validate_non_negative_index("solve_time", "n_shards",
                                              n_shards);
      current_statement__ = 117;
      context__.validate_dims("data initialization","solve_time","double",
           std::vector<size_t>{static_cast<size_t>(n_shards)});
      solve_time = 
        std::vector<double>(n_shards, 
          std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 117;
      solve_time = context__.vals_r("solve_time");
      current_statement__ = 117;
      stan::math::check_greater_or_equal(function__, "solve_time",
                                            solve_time, 0);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("CAR_MZ_counts", "numObs1",
                                              numObs1);
      current_statement__ = 119;
      context__.validate_dims("data initialization","CAR_MZ_counts","double",
           std::vector<size_t>{static_cast<size_t>(numObs1)});
      CAR_MZ_counts = 
        std::vector<double>(numObs1, 
          std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 119;
      CAR_MZ_counts = context__.vals_r("CAR_MZ_counts");
      current_statement__ = 119;
      stan::math::check_greater_or_equal(function__, "CAR_MZ_counts",
                                            CAR_MZ_counts, 0);
      current_statement__ = 120;
      stan::math::validate_non_negative_index("CAR_GC_counts", "numObs1",
                                              numObs1);
      current_statement__ = 121;
      context__.validate_dims("data initialization","CAR_GC_counts","double",
           std::vector<size_t>{static_cast<size_t>(numObs1)});
      CAR_GC_counts = 
        std::vector<double>(numObs1, 
          std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 121;
      CAR_GC_counts = context__.vals_r("CAR_GC_counts");
      current_statement__ = 121;
      stan::math::check_greater_or_equal(function__, "CAR_GC_counts",
                                            CAR_GC_counts, 0);
      current_statement__ = 122;
      stan::math::validate_non_negative_index("CAR_MZN2_counts", "numObs2",
                                              numObs2);
      current_statement__ = 123;
      context__.validate_dims("data initialization","CAR_MZN2_counts",
          "double", std::vector<size_t>{static_cast<size_t>(numObs2)});
      CAR_MZN2_counts = 
        std::vector<double>(numObs2, 
          std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 123;
      CAR_MZN2_counts = context__.vals_r("CAR_MZN2_counts");
      current_statement__ = 123;
      stan::math::check_greater_or_equal(function__, "CAR_MZN2_counts",
                                            CAR_MZN2_counts, 0);
      current_statement__ = 124;
      stan::math::validate_non_negative_index("CAR_GCN2_counts", "numObs2",
                                              numObs2);
      current_statement__ = 125;
      context__.validate_dims("data initialization","CAR_GCN2_counts",
          "double", std::vector<size_t>{static_cast<size_t>(numObs2)});
      CAR_GCN2_counts = 
        std::vector<double>(numObs2, 
          std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 125;
      CAR_GCN2_counts = context__.vals_r("CAR_GCN2_counts");
      current_statement__ = 125;
      stan::math::check_greater_or_equal(function__, "CAR_GCN2_counts",
                                            CAR_GCN2_counts, 0);
      current_statement__ = 126;
      stan::math::validate_non_negative_index("ts_pred", "numPred", numPred);
      current_statement__ = 127;
      context__.validate_dims("data initialization","ts_pred","double",
           std::vector<size_t>{static_cast<size_t>(numPred)});
      ts_pred = 
        std::vector<double>(numPred, 
          std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 127;
      ts_pred = context__.vals_r("ts_pred");
      current_statement__ = 128;
      stan::math::validate_non_negative_index("y_hat", "n_shards", n_shards);
      current_statement__ = 129;
      stan::math::validate_non_negative_index("CAR_GCcounts_mean", "numObs1",
                                              numObs1);
      current_statement__ = 130;
      stan::math::validate_non_negative_index("CAR_MZcounts_mean", "numObs1",
                                              numObs1);
      current_statement__ = 131;
      stan::math::validate_non_negative_index("CAR_GCN2counts_mean",
                                              "numObs2", numObs2);
      current_statement__ = 132;
      stan::math::validate_non_negative_index("CAR_MZN2counts_mean",
                                              "numObs2", numObs2);
      current_statement__ = 133;
      stan::math::validate_non_negative_index("y_hat_pred", "numPred",
                                              numPred);
      current_statement__ = 134;
      stan::math::validate_non_negative_index("y1_mean_pred", "numPred",
                                              numPred);
      current_statement__ = 135;
      stan::math::validate_non_negative_index("y2_mean_pred", "numPred",
                                              numPred);
      current_statement__ = 136;
      stan::math::validate_non_negative_index("y3_mean_pred", "numPred",
                                              numPred);
      current_statement__ = 137;
      stan::math::validate_non_negative_index("y4_mean_pred", "numPred",
                                              numPred);
      current_statement__ = 138;
      stan::math::validate_non_negative_index("FOtoCARMZ_pred", "numPred",
                                              numPred);
      current_statement__ = 139;
      stan::math::validate_non_negative_index("MZtoCARMZ_pred", "numPred",
                                              numPred);
      current_statement__ = 140;
      stan::math::validate_non_negative_index("FOtoCARGC_pred", "numPred",
                                              numPred);
      current_statement__ = 141;
      stan::math::validate_non_negative_index("alpha_pred", "numPred",
                                              numPred);
      current_statement__ = 142;
      stan::math::validate_non_negative_index("beta_pred", "numPred", numPred);
      current_statement__ = 143;
      stan::math::validate_non_negative_index("CAR_MZcounts_pred", "numPred",
                                              numPred);
      current_statement__ = 144;
      stan::math::validate_non_negative_index("CAR_GCcounts_pred", "numPred",
                                              numPred);
      current_statement__ = 145;
      stan::math::validate_non_negative_index("CAR_MZN2counts_pred",
                                              "numPred", numPred);
      current_statement__ = 146;
      stan::math::validate_non_negative_index("CAR_GCN2counts_pred",
                                              "numPred", numPred);
      current_statement__ = 147;
      stan::math::validate_non_negative_index("resid_d1", "numObs1", numObs1);
      current_statement__ = 148;
      stan::math::validate_non_negative_index("resid_d2", "numObs1", numObs1);
      current_statement__ = 149;
      stan::math::validate_non_negative_index("resid_d3", "numObs2", numObs2);
      current_statement__ = 150;
      stan::math::validate_non_negative_index("resid_d4", "numObs2", numObs2);
      current_statement__ = 151;
      stan::math::validate_non_negative_index("log_lik1", "numObs1", numObs1);
      current_statement__ = 152;
      stan::math::validate_non_negative_index("log_lik2", "numObs1", numObs1);
      current_statement__ = 153;
      stan::math::validate_non_negative_index("log_lik3", "numObs2", numObs2);
      current_statement__ = 154;
      stan::math::validate_non_negative_index("log_lik4", "numObs2", numObs2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "Linear_timeinflux1_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 1;
      alpha = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      local_scalar_t__ beta = DUMMY_VAR__;
      current_statement__ = 2;
      beta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 3;
      mu = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      local_scalar_t__ delta = DUMMY_VAR__;
      current_statement__ = 4;
      delta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      local_scalar_t__ lambda_WT = DUMMY_VAR__;
      current_statement__ = 5;
      lambda_WT = in__.template read_constrain_lb<local_scalar_t__, 
                    jacobian__>(0, lp__);
      local_scalar_t__ lambda_N2KO = DUMMY_VAR__;
      current_statement__ = 6;
      lambda_N2KO = in__.template read_constrain_lb<local_scalar_t__, 
                      jacobian__>(lambda_WT, lp__);
      local_scalar_t__ nu = DUMMY_VAR__;
      current_statement__ = 7;
      nu = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      local_scalar_t__ M0N2 = DUMMY_VAR__;
      current_statement__ = 8;
      M0N2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ sigma1 = DUMMY_VAR__;
      current_statement__ = 9;
      sigma1 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      local_scalar_t__ sigma2 = DUMMY_VAR__;
      current_statement__ = 10;
      sigma2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      local_scalar_t__ sigma3 = DUMMY_VAR__;
      current_statement__ = 11;
      sigma3 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      std::vector<std::vector<local_scalar_t__>> y_hat =
         std::vector<std::vector<local_scalar_t__>>(n_shards, 
           std::vector<local_scalar_t__>(3, DUMMY_VAR__));
      std::vector<local_scalar_t__> CAR_GCcounts_mean =
         std::vector<local_scalar_t__>(numObs1, DUMMY_VAR__);
      std::vector<local_scalar_t__> CAR_MZcounts_mean =
         std::vector<local_scalar_t__>(numObs1, DUMMY_VAR__);
      std::vector<local_scalar_t__> CAR_GCN2counts_mean =
         std::vector<local_scalar_t__>(numObs2, DUMMY_VAR__);
      std::vector<local_scalar_t__> CAR_MZN2counts_mean =
         std::vector<local_scalar_t__>(numObs2, DUMMY_VAR__);
      std::vector<local_scalar_t__> parms =
         std::vector<local_scalar_t__>(7, DUMMY_VAR__);
      std::vector<local_scalar_t__> init_cond =
         std::vector<local_scalar_t__>(3, DUMMY_VAR__);
      local_scalar_t__ CAR_GC0 = DUMMY_VAR__;
      current_statement__ = 19;
      CAR_GC0 = stan::math::exp(11.5);
      local_scalar_t__ CAR_MZ0 = DUMMY_VAR__;
      current_statement__ = 20;
      CAR_MZ0 = stan::math::exp(10.8);
      local_scalar_t__ CAR_MZ0N2k0 = DUMMY_VAR__;
      current_statement__ = 21;
      CAR_MZ0N2k0 = stan::math::exp(M0N2);
      current_statement__ = 22;
      stan::model::assign(init_cond, CAR_GC0,
        "assigning variable init_cond", stan::model::index_uni(1));
      current_statement__ = 23;
      stan::model::assign(init_cond, CAR_MZ0,
        "assigning variable init_cond", stan::model::index_uni(2));
      current_statement__ = 24;
      stan::model::assign(init_cond, CAR_MZ0N2k0,
        "assigning variable init_cond", stan::model::index_uni(3));
      current_statement__ = 25;
      stan::model::assign(parms, alpha,
        "assigning variable parms", stan::model::index_uni(1));
      current_statement__ = 26;
      stan::model::assign(parms, beta,
        "assigning variable parms", stan::model::index_uni(2));
      current_statement__ = 27;
      stan::model::assign(parms, mu,
        "assigning variable parms", stan::model::index_uni(3));
      current_statement__ = 28;
      stan::model::assign(parms, delta,
        "assigning variable parms", stan::model::index_uni(4));
      current_statement__ = 29;
      stan::model::assign(parms, lambda_WT,
        "assigning variable parms", stan::model::index_uni(5));
      current_statement__ = 30;
      stan::model::assign(parms, lambda_N2KO,
        "assigning variable parms", stan::model::index_uni(6));
      current_statement__ = 31;
      stan::model::assign(parms, nu,
        "assigning variable parms", stan::model::index_uni(7));
      current_statement__ = 32;
      stan::model::assign(y_hat, init_cond,
        "assigning variable y_hat", stan::model::index_uni(1));
      current_statement__ = 33;
      stan::model::assign(y_hat,
        solve_ODE_sys(
          stan::model::rvalue(solve_time, "solve_time",
            stan::model::index_min(2)), init_cond, parms, pstream__),
        "assigning variable y_hat", stan::model::index_min(2));
      current_statement__ = 37;
      for (int i = 1; i <= numObs1; ++i) {
        current_statement__ = 34;
        stan::model::assign(CAR_GCcounts_mean,
          stan::model::rvalue(y_hat, "y_hat",
            stan::model::index_uni(stan::model::rvalue(time_index1,
                                     "time_index1",
                                     stan::model::index_uni(i))),
              stan::model::index_uni(1)),
          "assigning variable CAR_GCcounts_mean", stan::model::index_uni(i));
        current_statement__ = 35;
        stan::model::assign(CAR_MZcounts_mean,
          stan::model::rvalue(y_hat, "y_hat",
            stan::model::index_uni(stan::model::rvalue(time_index1,
                                     "time_index1",
                                     stan::model::index_uni(i))),
              stan::model::index_uni(2)),
          "assigning variable CAR_MZcounts_mean", stan::model::index_uni(i));
      }
      current_statement__ = 41;
      for (int i = 1; i <= numObs2; ++i) {
        current_statement__ = 38;
        stan::model::assign(CAR_GCN2counts_mean,
          stan::model::rvalue(y_hat, "y_hat",
            stan::model::index_uni(stan::model::rvalue(time_index2,
                                     "time_index2",
                                     stan::model::index_uni(i))),
              stan::model::index_uni(1)),
          "assigning variable CAR_GCN2counts_mean", stan::model::index_uni(i));
        current_statement__ = 39;
        stan::model::assign(CAR_MZN2counts_mean,
          stan::model::rvalue(y_hat, "y_hat",
            stan::model::index_uni(stan::model::rvalue(time_index2,
                                     "time_index2",
                                     stan::model::index_uni(i))),
              stan::model::index_uni(3)),
          "assigning variable CAR_MZN2counts_mean", stan::model::index_uni(i));
      }
      {
        current_statement__ = 93;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha, 0.01, 0.5));
        current_statement__ = 94;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta, 0.01, 0.5));
        current_statement__ = 95;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu, 0.01, 0.5));
        current_statement__ = 96;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(nu, 0.01, 0.5));
        current_statement__ = 97;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(delta, 0.8, 0.3));
        current_statement__ = 98;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(lambda_WT, 0.1, 0.3));
        current_statement__ = 99;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(lambda_N2KO, 0.8, 0.3));
        current_statement__ = 100;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(M0N2, 8, 1.5));
        current_statement__ = 101;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma1, 0, 2.5));
        current_statement__ = 102;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma2, 0, 2.5));
        current_statement__ = 103;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma3, 0, 2.5));
        current_statement__ = 104;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(stan::math::log(CAR_GC_counts),
            stan::math::log(CAR_GCcounts_mean), sigma1));
        current_statement__ = 105;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(stan::math::log(CAR_MZ_counts),
            stan::math::log(CAR_MZcounts_mean), sigma2));
        current_statement__ = 106;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(stan::math::log(CAR_GCN2_counts),
            stan::math::log(CAR_GCN2counts_mean), sigma1));
        current_statement__ = 107;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(stan::math::log(CAR_MZN2_counts),
            stan::math::log(CAR_MZN2counts_mean), sigma3));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "Linear_timeinflux1_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      alpha = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      double beta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      beta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      mu = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      double delta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      delta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      double lambda_WT = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      lambda_WT = in__.template read_constrain_lb<local_scalar_t__, 
                    jacobian__>(0, lp__);
      double lambda_N2KO = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      lambda_N2KO = in__.template read_constrain_lb<local_scalar_t__, 
                      jacobian__>(lambda_WT, lp__);
      double nu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      nu = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      double M0N2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      M0N2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double sigma1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      sigma1 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      double sigma2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      sigma2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      double sigma3 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 11;
      sigma3 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      std::vector<std::vector<double>> y_hat =
         std::vector<std::vector<double>>(n_shards, 
           std::vector<double>(3, std::numeric_limits<double>::quiet_NaN()));
      std::vector<double> CAR_GCcounts_mean =
         std::vector<double>(numObs1, 
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> CAR_MZcounts_mean =
         std::vector<double>(numObs1, 
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> CAR_GCN2counts_mean =
         std::vector<double>(numObs2, 
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> CAR_MZN2counts_mean =
         std::vector<double>(numObs2, 
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> parms =
         std::vector<double>(7, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> init_cond =
         std::vector<double>(3, std::numeric_limits<double>::quiet_NaN());
      double CAR_GC0 = std::numeric_limits<double>::quiet_NaN();
      double CAR_MZ0 = std::numeric_limits<double>::quiet_NaN();
      double CAR_MZ0N2k0 = std::numeric_limits<double>::quiet_NaN();
      out__.write(alpha);
      out__.write(beta);
      out__.write(mu);
      out__.write(delta);
      out__.write(lambda_WT);
      out__.write(lambda_N2KO);
      out__.write(nu);
      out__.write(M0N2);
      out__.write(sigma1);
      out__.write(sigma2);
      out__.write(sigma3);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 19;
      CAR_GC0 = stan::math::exp(11.5);
      current_statement__ = 20;
      CAR_MZ0 = stan::math::exp(10.8);
      current_statement__ = 21;
      CAR_MZ0N2k0 = stan::math::exp(M0N2);
      current_statement__ = 22;
      stan::model::assign(init_cond, CAR_GC0,
        "assigning variable init_cond", stan::model::index_uni(1));
      current_statement__ = 23;
      stan::model::assign(init_cond, CAR_MZ0,
        "assigning variable init_cond", stan::model::index_uni(2));
      current_statement__ = 24;
      stan::model::assign(init_cond, CAR_MZ0N2k0,
        "assigning variable init_cond", stan::model::index_uni(3));
      current_statement__ = 25;
      stan::model::assign(parms, alpha,
        "assigning variable parms", stan::model::index_uni(1));
      current_statement__ = 26;
      stan::model::assign(parms, beta,
        "assigning variable parms", stan::model::index_uni(2));
      current_statement__ = 27;
      stan::model::assign(parms, mu,
        "assigning variable parms", stan::model::index_uni(3));
      current_statement__ = 28;
      stan::model::assign(parms, delta,
        "assigning variable parms", stan::model::index_uni(4));
      current_statement__ = 29;
      stan::model::assign(parms, lambda_WT,
        "assigning variable parms", stan::model::index_uni(5));
      current_statement__ = 30;
      stan::model::assign(parms, lambda_N2KO,
        "assigning variable parms", stan::model::index_uni(6));
      current_statement__ = 31;
      stan::model::assign(parms, nu,
        "assigning variable parms", stan::model::index_uni(7));
      current_statement__ = 32;
      stan::model::assign(y_hat, init_cond,
        "assigning variable y_hat", stan::model::index_uni(1));
      current_statement__ = 33;
      stan::model::assign(y_hat,
        solve_ODE_sys(
          stan::model::rvalue(solve_time, "solve_time",
            stan::model::index_min(2)), init_cond, parms, pstream__),
        "assigning variable y_hat", stan::model::index_min(2));
      current_statement__ = 37;
      for (int i = 1; i <= numObs1; ++i) {
        current_statement__ = 34;
        stan::model::assign(CAR_GCcounts_mean,
          stan::model::rvalue(y_hat, "y_hat",
            stan::model::index_uni(stan::model::rvalue(time_index1,
                                     "time_index1",
                                     stan::model::index_uni(i))),
              stan::model::index_uni(1)),
          "assigning variable CAR_GCcounts_mean", stan::model::index_uni(i));
        current_statement__ = 35;
        stan::model::assign(CAR_MZcounts_mean,
          stan::model::rvalue(y_hat, "y_hat",
            stan::model::index_uni(stan::model::rvalue(time_index1,
                                     "time_index1",
                                     stan::model::index_uni(i))),
              stan::model::index_uni(2)),
          "assigning variable CAR_MZcounts_mean", stan::model::index_uni(i));
      }
      current_statement__ = 41;
      for (int i = 1; i <= numObs2; ++i) {
        current_statement__ = 38;
        stan::model::assign(CAR_GCN2counts_mean,
          stan::model::rvalue(y_hat, "y_hat",
            stan::model::index_uni(stan::model::rvalue(time_index2,
                                     "time_index2",
                                     stan::model::index_uni(i))),
              stan::model::index_uni(1)),
          "assigning variable CAR_GCN2counts_mean", stan::model::index_uni(i));
        current_statement__ = 39;
        stan::model::assign(CAR_MZN2counts_mean,
          stan::model::rvalue(y_hat, "y_hat",
            stan::model::index_uni(stan::model::rvalue(time_index2,
                                     "time_index2",
                                     stan::model::index_uni(i))),
              stan::model::index_uni(3)),
          "assigning variable CAR_MZN2counts_mean", stan::model::index_uni(i));
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_shards; ++sym2__) {
            out__.write(y_hat[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(CAR_GCcounts_mean);
        out__.write(CAR_MZcounts_mean);
        out__.write(CAR_GCN2counts_mean);
        out__.write(CAR_MZN2counts_mean);
        out__.write(parms);
        out__.write(init_cond);
        out__.write(CAR_GC0);
        out__.write(CAR_MZ0);
        out__.write(CAR_MZ0N2k0);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<std::vector<double>> y_hat_pred =
         std::vector<std::vector<double>>(numPred, 
           std::vector<double>(3, std::numeric_limits<double>::quiet_NaN()));
      std::vector<double> y1_mean_pred =
         std::vector<double>(numPred, 
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> y2_mean_pred =
         std::vector<double>(numPred, 
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> y3_mean_pred =
         std::vector<double>(numPred, 
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> y4_mean_pred =
         std::vector<double>(numPred, 
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> FOtoCARMZ_pred =
         std::vector<double>(numPred, 
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> MZtoCARMZ_pred =
         std::vector<double>(numPred, 
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> FOtoCARGC_pred =
         std::vector<double>(numPred, 
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> alpha_pred =
         std::vector<double>(numPred, 
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> beta_pred =
         std::vector<double>(numPred, 
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> CAR_MZcounts_pred =
         std::vector<double>(numPred, 
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> CAR_GCcounts_pred =
         std::vector<double>(numPred, 
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> CAR_MZN2counts_pred =
         std::vector<double>(numPred, 
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> CAR_GCN2counts_pred =
         std::vector<double>(numPred, 
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> resid_d1 =
         Eigen::Matrix<double, -1, 1>::Constant(numObs1,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> resid_d2 =
         Eigen::Matrix<double, -1, 1>::Constant(numObs1,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> resid_d3 =
         Eigen::Matrix<double, -1, 1>::Constant(numObs2,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> resid_d4 =
         Eigen::Matrix<double, -1, 1>::Constant(numObs2,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> log_lik1 =
         Eigen::Matrix<double, -1, 1>::Constant(numObs1,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> log_lik2 =
         Eigen::Matrix<double, -1, 1>::Constant(numObs1,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> log_lik3 =
         Eigen::Matrix<double, -1, 1>::Constant(numObs2,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> log_lik4 =
         Eigen::Matrix<double, -1, 1>::Constant(numObs2,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 64;
      stan::model::assign(y_hat_pred, init_cond,
        "assigning variable y_hat_pred", stan::model::index_uni(1));
      current_statement__ = 65;
      stan::model::assign(y_hat_pred,
        solve_ODE_sys(
          stan::model::rvalue(ts_pred, "ts_pred", stan::model::index_min(2)),
          init_cond, parms, pstream__),
        "assigning variable y_hat_pred", stan::model::index_min(2));
      current_statement__ = 80;
      for (int i = 1; i <= numPred; ++i) {
        current_statement__ = 66;
        stan::model::assign(y1_mean_pred,
          stan::model::rvalue(y_hat_pred, "y_hat_pred",
            stan::model::index_uni(i), stan::model::index_uni(1)),
          "assigning variable y1_mean_pred", stan::model::index_uni(i));
        current_statement__ = 67;
        stan::model::assign(CAR_GCcounts_pred,
          stan::math::exp(
            stan::math::normal_rng(
              stan::math::log(
                stan::model::rvalue(y1_mean_pred, "y1_mean_pred",
                  stan::model::index_uni(i))), sigma1, base_rng__)),
          "assigning variable CAR_GCcounts_pred", stan::model::index_uni(i));
        current_statement__ = 68;
        stan::model::assign(y2_mean_pred,
          stan::model::rvalue(y_hat_pred, "y_hat_pred",
            stan::model::index_uni(i), stan::model::index_uni(2)),
          "assigning variable y2_mean_pred", stan::model::index_uni(i));
        current_statement__ = 69;
        stan::model::assign(CAR_MZcounts_pred,
          stan::math::exp(
            stan::math::normal_rng(
              stan::math::log(
                stan::model::rvalue(y2_mean_pred, "y2_mean_pred",
                  stan::model::index_uni(i))), sigma2, base_rng__)),
          "assigning variable CAR_MZcounts_pred", stan::model::index_uni(i));
        current_statement__ = 70;
        stan::model::assign(y3_mean_pred,
          stan::model::rvalue(y_hat_pred, "y_hat_pred",
            stan::model::index_uni(i), stan::model::index_uni(1)),
          "assigning variable y3_mean_pred", stan::model::index_uni(i));
        current_statement__ = 71;
        stan::model::assign(CAR_GCN2counts_pred,
          stan::math::exp(
            stan::math::normal_rng(
              stan::math::log(
                stan::model::rvalue(y3_mean_pred, "y3_mean_pred",
                  stan::model::index_uni(i))), sigma1, base_rng__)),
          "assigning variable CAR_GCN2counts_pred", stan::model::index_uni(i));
        current_statement__ = 72;
        stan::model::assign(y4_mean_pred,
          stan::model::rvalue(y_hat_pred, "y_hat_pred",
            stan::model::index_uni(i), stan::model::index_uni(3)),
          "assigning variable y4_mean_pred", stan::model::index_uni(i));
        current_statement__ = 73;
        stan::model::assign(CAR_MZN2counts_pred,
          stan::math::exp(
            stan::math::normal_rng(
              stan::math::log(
                stan::model::rvalue(y4_mean_pred, "y4_mean_pred",
                  stan::model::index_uni(i))), sigma3, base_rng__)),
          "assigning variable CAR_MZN2counts_pred", stan::model::index_uni(i));
        current_statement__ = 74;
        stan::model::assign(beta_pred,
          (mu /
            (1 +
              stan::math::exp(
                (nu *
                  stan::math::pow(
                    (stan::model::rvalue(ts_pred, "ts_pred",
                       stan::model::index_uni(i)) - 4.0), 2))))),
          "assigning variable beta_pred", stan::model::index_uni(i));
        current_statement__ = 75;
        stan::model::assign(FOtoCARMZ_pred,
          ((mu *
             stan::model::rvalue(y1_mean_pred, "y1_mean_pred",
               stan::model::index_uni(i))) /
            stan::model::rvalue(y2_mean_pred, "y2_mean_pred",
              stan::model::index_uni(i))),
          "assigning variable FOtoCARMZ_pred", stan::model::index_uni(i));
        current_statement__ = 76;
        stan::model::assign(MZtoCARMZ_pred,
          ((stan::model::rvalue(beta_pred, "beta_pred",
              stan::model::index_uni(i)) *
             CAR_negative_MZB(
               stan::model::rvalue(ts_pred, "ts_pred",
                 stan::model::index_uni(i)), pstream__)) /
            stan::model::rvalue(y2_mean_pred, "y2_mean_pred",
              stan::model::index_uni(i))),
          "assigning variable MZtoCARMZ_pred", stan::model::index_uni(i));
        current_statement__ = 77;
        stan::model::assign(alpha_pred,
          (alpha /
            (1 +
              stan::math::exp(
                (nu *
                  stan::math::pow(
                    (stan::model::rvalue(ts_pred, "ts_pred",
                       stan::model::index_uni(i)) - 4.0), 2))))),
          "assigning variable alpha_pred", stan::model::index_uni(i));
        current_statement__ = 78;
        stan::model::assign(FOtoCARGC_pred,
          (((alpha /
              (1 +
                stan::math::exp(
                  (nu *
                    stan::math::pow(
                      (stan::model::rvalue(ts_pred, "ts_pred",
                         stan::model::index_uni(i)) - 4.0), 2))))) *
             Total_FoB(
               stan::model::rvalue(ts_pred, "ts_pred",
                 stan::model::index_uni(i)), pstream__)) /
            stan::model::rvalue(y1_mean_pred, "y1_mean_pred",
              stan::model::index_uni(i))),
          "assigning variable FOtoCARGC_pred", stan::model::index_uni(i));
      }
      current_statement__ = 86;
      for (int n = 1; n <= numObs1; ++n) {
        current_statement__ = 81;
        stan::model::assign(resid_d1,
          (stan::math::log(
             stan::model::rvalue(CAR_GC_counts, "CAR_GC_counts",
               stan::model::index_uni(n))) -
            stan::math::log(
              stan::model::rvalue(CAR_GCcounts_mean, "CAR_GCcounts_mean",
                stan::model::index_uni(n)))),
          "assigning variable resid_d1", stan::model::index_uni(n));
        current_statement__ = 82;
        stan::model::assign(resid_d2,
          (stan::math::log(
             stan::model::rvalue(CAR_MZ_counts, "CAR_MZ_counts",
               stan::model::index_uni(n))) -
            stan::math::log(
              stan::model::rvalue(CAR_MZcounts_mean, "CAR_MZcounts_mean",
                stan::model::index_uni(n)))),
          "assigning variable resid_d2", stan::model::index_uni(n));
        current_statement__ = 83;
        stan::model::assign(log_lik1,
          stan::math::normal_lpdf<false>(
            stan::math::log(
              stan::model::rvalue(CAR_GC_counts, "CAR_GC_counts",
                stan::model::index_uni(n))),
            stan::math::log(
              stan::model::rvalue(CAR_GCcounts_mean, "CAR_GCcounts_mean",
                stan::model::index_uni(n))), sigma1),
          "assigning variable log_lik1", stan::model::index_uni(n));
        current_statement__ = 84;
        stan::model::assign(log_lik2,
          stan::math::normal_lpdf<false>(
            stan::math::log(
              stan::model::rvalue(CAR_MZ_counts, "CAR_MZ_counts",
                stan::model::index_uni(n))),
            stan::math::log(
              stan::model::rvalue(CAR_MZcounts_mean, "CAR_MZcounts_mean",
                stan::model::index_uni(n))), sigma2),
          "assigning variable log_lik2", stan::model::index_uni(n));
      }
      current_statement__ = 92;
      for (int n = 1; n <= numObs2; ++n) {
        current_statement__ = 87;
        stan::model::assign(resid_d3,
          (stan::math::log(
             stan::model::rvalue(CAR_GCN2_counts, "CAR_GCN2_counts",
               stan::model::index_uni(n))) -
            stan::math::log(
              stan::model::rvalue(CAR_GCN2counts_mean, "CAR_GCN2counts_mean",
                stan::model::index_uni(n)))),
          "assigning variable resid_d3", stan::model::index_uni(n));
        current_statement__ = 88;
        stan::model::assign(resid_d4,
          (stan::math::log(
             stan::model::rvalue(CAR_MZN2_counts, "CAR_MZN2_counts",
               stan::model::index_uni(n))) -
            stan::math::log(
              stan::model::rvalue(CAR_MZN2counts_mean, "CAR_MZN2counts_mean",
                stan::model::index_uni(n)))),
          "assigning variable resid_d4", stan::model::index_uni(n));
        current_statement__ = 89;
        stan::model::assign(log_lik3,
          stan::math::normal_lpdf<false>(
            stan::math::log(
              stan::model::rvalue(CAR_GCN2_counts, "CAR_GCN2_counts",
                stan::model::index_uni(n))),
            stan::math::log(
              stan::model::rvalue(CAR_GCN2counts_mean, "CAR_GCN2counts_mean",
                stan::model::index_uni(n))), sigma1),
          "assigning variable log_lik3", stan::model::index_uni(n));
        current_statement__ = 90;
        stan::model::assign(log_lik4,
          stan::math::normal_lpdf<false>(
            stan::math::log(
              stan::model::rvalue(CAR_MZN2_counts, "CAR_MZN2_counts",
                stan::model::index_uni(n))),
            stan::math::log(
              stan::model::rvalue(CAR_MZN2counts_mean, "CAR_MZN2counts_mean",
                stan::model::index_uni(n))), sigma3),
          "assigning variable log_lik4", stan::model::index_uni(n));
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          out__.write(y_hat_pred[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(y1_mean_pred);
      out__.write(y2_mean_pred);
      out__.write(y3_mean_pred);
      out__.write(y4_mean_pred);
      out__.write(FOtoCARMZ_pred);
      out__.write(MZtoCARMZ_pred);
      out__.write(FOtoCARGC_pred);
      out__.write(alpha_pred);
      out__.write(beta_pred);
      out__.write(CAR_MZcounts_pred);
      out__.write(CAR_GCcounts_pred);
      out__.write(CAR_MZN2counts_pred);
      out__.write(CAR_GCN2counts_pred);
      out__.write(resid_d1);
      out__.write(resid_d2);
      out__.write(resid_d3);
      out__.write(resid_d4);
      out__.write(log_lik1);
      out__.write(log_lik2);
      out__.write(log_lik3);
      out__.write(log_lik4);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ alpha = DUMMY_VAR__;
      alpha = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, alpha);
      local_scalar_t__ beta = DUMMY_VAR__;
      beta = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, beta);
      local_scalar_t__ mu = DUMMY_VAR__;
      mu = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, mu);
      local_scalar_t__ delta = DUMMY_VAR__;
      delta = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, delta);
      local_scalar_t__ lambda_WT = DUMMY_VAR__;
      lambda_WT = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, lambda_WT);
      local_scalar_t__ lambda_N2KO = DUMMY_VAR__;
      lambda_N2KO = in__.read<local_scalar_t__>();
      out__.write_free_lb(lambda_WT, lambda_N2KO);
      local_scalar_t__ nu = DUMMY_VAR__;
      nu = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, nu);
      local_scalar_t__ M0N2 = DUMMY_VAR__;
      M0N2 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, M0N2);
      local_scalar_t__ sigma1 = DUMMY_VAR__;
      sigma1 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma1);
      local_scalar_t__ sigma2 = DUMMY_VAR__;
      sigma2 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma2);
      local_scalar_t__ sigma3 = DUMMY_VAR__;
      sigma3 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma3);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"alpha", "beta", "mu", "delta",
      "lambda_WT", "lambda_N2KO", "nu", "M0N2", "sigma1", "sigma2", "sigma3",
      "y_hat", "CAR_GCcounts_mean", "CAR_MZcounts_mean",
      "CAR_GCN2counts_mean", "CAR_MZN2counts_mean", "parms", "init_cond",
      "CAR_GC0", "CAR_MZ0", "CAR_MZ0N2k0", "y_hat_pred", "y1_mean_pred",
      "y2_mean_pred", "y3_mean_pred", "y4_mean_pred", "FOtoCARMZ_pred",
      "MZtoCARMZ_pred", "FOtoCARGC_pred", "alpha_pred", "beta_pred",
      "CAR_MZcounts_pred", "CAR_GCcounts_pred", "CAR_MZN2counts_pred",
      "CAR_GCN2counts_pred", "resid_d1", "resid_d2", "resid_d3", "resid_d4",
      "log_lik1", "log_lik2", "log_lik3", "log_lik4"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(n_shards),
                          static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(numObs1)},
      std::vector<size_t>{static_cast<size_t>(numObs1)},
      std::vector<size_t>{static_cast<size_t>(numObs2)},
      std::vector<size_t>{static_cast<size_t>(numObs2)},
      std::vector<size_t>{static_cast<size_t>(7)},
      std::vector<size_t>{static_cast<size_t>(3)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(numPred),
                          static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(numPred)},
      std::vector<size_t>{static_cast<size_t>(numPred)},
      std::vector<size_t>{static_cast<size_t>(numPred)},
      std::vector<size_t>{static_cast<size_t>(numPred)},
      std::vector<size_t>{static_cast<size_t>(numPred)},
      std::vector<size_t>{static_cast<size_t>(numPred)},
      std::vector<size_t>{static_cast<size_t>(numPred)},
      std::vector<size_t>{static_cast<size_t>(numPred)},
      std::vector<size_t>{static_cast<size_t>(numPred)},
      std::vector<size_t>{static_cast<size_t>(numPred)},
      std::vector<size_t>{static_cast<size_t>(numPred)},
      std::vector<size_t>{static_cast<size_t>(numPred)},
      std::vector<size_t>{static_cast<size_t>(numPred)},
      std::vector<size_t>{static_cast<size_t>(numObs1)},
      std::vector<size_t>{static_cast<size_t>(numObs1)},
      std::vector<size_t>{static_cast<size_t>(numObs2)},
      std::vector<size_t>{static_cast<size_t>(numObs2)},
      std::vector<size_t>{static_cast<size_t>(numObs1)},
      std::vector<size_t>{static_cast<size_t>(numObs1)},
      std::vector<size_t>{static_cast<size_t>(numObs2)},
      std::vector<size_t>{static_cast<size_t>(numObs2)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "beta");
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "delta");
    param_names__.emplace_back(std::string() + "lambda_WT");
    param_names__.emplace_back(std::string() + "lambda_N2KO");
    param_names__.emplace_back(std::string() + "nu");
    param_names__.emplace_back(std::string() + "M0N2");
    param_names__.emplace_back(std::string() + "sigma1");
    param_names__.emplace_back(std::string() + "sigma2");
    param_names__.emplace_back(std::string() + "sigma3");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_shards; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_hat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "CAR_GCcounts_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "CAR_MZcounts_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "CAR_GCN2counts_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "CAR_MZN2counts_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 7; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "parms" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "init_cond" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "CAR_GC0");
      param_names__.emplace_back(std::string() + "CAR_MZ0");
      param_names__.emplace_back(std::string() + "CAR_MZ0N2k0");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_hat_pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "FOtoCARMZ_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "MZtoCARMZ_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "FOtoCARGC_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "CAR_MZcounts_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "CAR_GCcounts_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "CAR_MZN2counts_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "CAR_GCN2counts_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "resid_d1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "resid_d2" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "resid_d3" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "resid_d4" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik2" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik3" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik4" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "beta");
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "delta");
    param_names__.emplace_back(std::string() + "lambda_WT");
    param_names__.emplace_back(std::string() + "lambda_N2KO");
    param_names__.emplace_back(std::string() + "nu");
    param_names__.emplace_back(std::string() + "M0N2");
    param_names__.emplace_back(std::string() + "sigma1");
    param_names__.emplace_back(std::string() + "sigma2");
    param_names__.emplace_back(std::string() + "sigma3");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_shards; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_hat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "CAR_GCcounts_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "CAR_MZcounts_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "CAR_GCN2counts_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "CAR_MZN2counts_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 7; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "parms" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "init_cond" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "CAR_GC0");
      param_names__.emplace_back(std::string() + "CAR_MZ0");
      param_names__.emplace_back(std::string() + "CAR_MZ0N2k0");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_hat_pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "FOtoCARMZ_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "MZtoCARMZ_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "FOtoCARGC_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "CAR_MZcounts_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "CAR_GCcounts_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "CAR_MZN2counts_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "CAR_GCN2counts_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "resid_d1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "resid_d2" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "resid_d3" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "resid_d4" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik2" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik3" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik4" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda_WT\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda_N2KO\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"M0N2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_shards) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"CAR_GCcounts_mean\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numObs1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"CAR_MZcounts_mean\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numObs1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"CAR_GCN2counts_mean\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numObs2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"CAR_MZN2counts_mean\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numObs2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"parms\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(7) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"init_cond\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"CAR_GC0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"CAR_MZ0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"CAR_MZ0N2k0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y_hat_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y1_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"FOtoCARMZ_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"MZtoCARMZ_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"FOtoCARGC_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"alpha_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"beta_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"CAR_MZcounts_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"CAR_GCcounts_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"CAR_MZN2counts_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"CAR_GCN2counts_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"resid_d1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(numObs1) + "},\"block\":\"generated_quantities\"},{\"name\":\"resid_d2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(numObs1) + "},\"block\":\"generated_quantities\"},{\"name\":\"resid_d3\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(numObs2) + "},\"block\":\"generated_quantities\"},{\"name\":\"resid_d4\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(numObs2) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(numObs1) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(numObs1) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik3\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(numObs2) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik4\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(numObs2) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda_WT\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda_N2KO\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"M0N2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_shards) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"CAR_GCcounts_mean\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numObs1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"CAR_MZcounts_mean\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numObs1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"CAR_GCN2counts_mean\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numObs2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"CAR_MZN2counts_mean\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numObs2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"parms\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(7) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"init_cond\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"CAR_GC0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"CAR_MZ0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"CAR_MZ0N2k0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y_hat_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y1_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"FOtoCARMZ_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"MZtoCARMZ_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"FOtoCARGC_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"alpha_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"beta_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"CAR_MZcounts_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"CAR_GCcounts_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"CAR_MZN2counts_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"CAR_GCN2counts_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"resid_d1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(numObs1) + "},\"block\":\"generated_quantities\"},{\"name\":\"resid_d2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(numObs1) + "},\"block\":\"generated_quantities\"},{\"name\":\"resid_d3\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(numObs2) + "},\"block\":\"generated_quantities\"},{\"name\":\"resid_d4\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(numObs2) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(numObs1) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(numObs1) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik3\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(numObs2) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik4\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(numObs2) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = 
  ((((((((((n_shards * 3) + numObs1) + numObs1) + numObs2) + numObs2) + 7) +
       3) + 1) + 1) + 1);
      const size_t num_gen_quantities = ((((((((((((((((((((((numPred
                                                                    * 3) +
                                                                    numPred)
                                                                    +
                                                                    numPred)
                                                                    +
                                                                    numPred)
                                                                    +
                                                                    numPred)
                                                                    +
                                                                    numPred)
                                                                    +
                                                                    numPred)
                                                                    +
                                                                    numPred)
                                                                    +
                                                                    numPred)
                                                                    +
                                                                    numPred)
                                                                    +
                                                                    numPred)
                                                                    +
                                                                    numPred)
                                                                    +
                                                                    numPred)
                                                                    +
                                                                    numPred)
                                                                    +
                                                                    numObs1)
                                                                    +
                                                                    numObs1)
                                                                    +
                                                                    numObs2)
                                                                    +
                                                                    numObs2)
                                                                    +
                                                                    numObs1)
                                                                    +
                                                                    numObs1)
                                                                    +
                                                                    numObs2)
                                                                    +
                                                                    numObs2);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = 
  ((((((((((n_shards * 3) + numObs1) + numObs1) + numObs2) + numObs2) + 7) +
       3) + 1) + 1) + 1);
      const size_t num_gen_quantities = ((((((((((((((((((((((numPred
                                                                    * 3) +
                                                                    numPred)
                                                                    +
                                                                    numPred)
                                                                    +
                                                                    numPred)
                                                                    +
                                                                    numPred)
                                                                    +
                                                                    numPred)
                                                                    +
                                                                    numPred)
                                                                    +
                                                                    numPred)
                                                                    +
                                                                    numPred)
                                                                    +
                                                                    numPred)
                                                                    +
                                                                    numPred)
                                                                    +
                                                                    numPred)
                                                                    +
                                                                    numPred)
                                                                    +
                                                                    numPred)
                                                                    +
                                                                    numObs1)
                                                                    +
                                                                    numObs1)
                                                                    +
                                                                    numObs2)
                                                                    +
                                                                    numObs2)
                                                                    +
                                                                    numObs1)
                                                                    +
                                                                    numObs1)
                                                                    +
                                                                    numObs2)
                                                                    +
                                                                    numObs2);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 11> names__{"alpha", "beta", "mu",
      "delta", "lambda_WT", "lambda_N2KO", "nu", "M0N2", "sigma1", "sigma2",
      "sigma3"};
      const std::array<Eigen::Index, 11> constrain_param_sizes__{1, 1, 
       1, 1, 1, 1, 1, 1, 1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = Linear_timeinflux1_model_namespace::Linear_timeinflux1_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return Linear_timeinflux1_model_namespace::profiles__;
}

#endif


